library("readxl")
library(readxl)
rm(list = ls())
library(dplyr)
library(e1071)
library(psych)
setwd('C:/Users/vayze/Documents')
df = read.table("CassieData.csv",sep= ",", header = TRUE)
df = df[df$Exclude==0,]
corr.perm = matrix(0,2, iter)
# makes a 25 x 2 matrix of zeros
predicted = matrix(0,nrow(df),2)
View(predicted)
?scale
df= scale(df, center = TRUE, scale = TRUE)
df= as.data.frame(scale(df, center = TRUE, scale = TRUE))
View(df)
df = read.table("CassieData.csv",sep= ",", header = TRUE)
df = df[df$Exclude==0,]
df = read.table("CassieData.csv",sep= ",", header = TRUE)
df = df[df$Exclude==0,]
df$EmotNeg= scale(df$EmotNeg, center = TRUE, scale = TRUE)
df$L_Amyg_dAcc= scale(df$L_Amyg_dAcc, center = TRUE, scale = TRUE)
View(df)
ii = 1
leftout = df[ii,]
View(leftout)
rest = df[df$ID != leftout$ID,]
View(leftout)
View(rest)
#fit the regression
fit = lm(L_Amyg_dAcc ~ EmotNeg, data = rest)
summary(fit)
fit$coefficients[2]
View(fit)
fit[1][1]
fit[2][1]
fit[3][1]
fit[4][1]
fit[5][1]
fit[6][1]
fit[7][1]
fit[8][1]
fit[9][1]
fit[10][1]
fit[11][1]
fit[12][1]
fit[13][1]
fit[14][1]
fit[15][1]
fit[16][1]
fit
summary(fit)
sfit = summary(fit)
View(sfit)
sfit$coefficients
sfit$coefficients[2,2]
fit = lm(L_Amyg_dAcc ~ EmotNeg, data = rest)
Beta = fit$coefficients[2]
sfit = summary(fit)
SE = sfit$coefficients[2,2]
leftout_pred = Beta*leftout$EmotNeg + SE
leftout_pred
predicted[ii, 1] = leftout_pred
predicted[ii, 2] = leftout$L_Amyg_dAcc
View(predicted)
for (ii in 1:nrow(df)){
leftout = df[ii,]
rest = df[df$ID != leftout$ID,]
#fit the regression
fit = lm(L_Amyg_dAcc ~ EmotNeg, data = rest)
Beta = fit$coefficients[2]
sfit = summary(fit)
SE = sfit$coefficients[2,2]
leftout_pred = Beta*leftout$EmotNeg + SE
predicted[ii, 1] = leftout_pred
predicted[ii, 2] = leftout$L_Amyg_dAcc
}
View(predicted)
cor(predicted[,1], predicted[,2], use="complete.obs", method = 'pearson')
load("C:/Users/vayze/Desktop/GitHub_Repos/LiMA/Infant_Data/LiMA_Model_Data.RData")
View(Exp1.Models)
Exp1.Models$CI_Low[22]
Exp1.Models[22,5]
as.character(as.numeric(Exp1.Models[21,5]) - .002)
as.character(as.numeric(Exp1.Models[21,5]) - .003)
Exp1.Models = as.character(as.numeric(Exp1.Models[21,5]) - .003)
load("C:/Users/vayze/Desktop/GitHub_Repos/LiMA/Infant_Data/LiMA_Model_Data.RData")
Exp1.Models[21,5]= as.character(as.numeric(Exp1.Models[21,5]) - .003)
View(Exp1.Models)
save(Exp1.Models, Exp2.Models, file="Infant_Data/LiMA_Model_Data.RData")
setwd('C:/Users/vayze/Desktop/GitHub_Repos/LiMA')
save(Exp1.Models, Exp2.Models, file="Infant_Data/LiMA_Model_Data.RData")
rm(list = ls())
library(ggplot2)
library(reshape2)
setwd('C:/Users/vayze/Desktop/GitHub_Repos/LiMA')
load('Infant_Data/LiMA_Model_Data_Size.RData')
load('Infant_Data/LiMA_Model_Data.RData')
load('Infant_Data/LiMA_Model_Data_MultiItem.RData')
exp = c('Exp1', 'Exp2')
classifier = c("OCS", "ISOF")
ModelType= c('Infant', 'FF_IN', 'R_IN', 'FF_SN', 'R_SN')
ActualName= c('Infants', 'AlexNet-IN', 'ResNet-IN', 'AlexNet-SIN', 'ResNet-SIN')
for (mm in 1:length(ModelType)){
Exp1.Models[,1][Exp1.Models[,1] == ModelType[mm]] = ActualName[mm]
Exp2.Models[,1][Exp2.Models[,1] == ModelType[mm]] = ActualName[mm]
Exp1.Models_MSL[,1][Exp1.Models_MSL[,1] == ModelType[mm]] = ActualName[mm]
Exp2.Models_MSL[,1][Exp2.Models_MSL[,1] == ModelType[mm]] = ActualName[mm]
Exp1.Models_Size[,1][Exp1.Models_Size[,1] == ModelType[mm]] = ActualName[mm]
Exp2.Models_Size[,1][Exp2.Models_Size[,1] == ModelType[mm]] = ActualName[mm]
}
sLine = .7
sAx = 8
sTitle = 10
sPlot = 2.5
ModelCols = c('#39a055', '#8ccf8a', '#c81b1d', '#ec3f2f', '#fa7051', '#fc9e80')
for (ee in exp){
for (cl in classifier){
#Preprocess data to have factors and conditions etc.
df = as.data.frame(eval(as.name(paste(ee, '.Models', sep=""))))
df$Model = factor(df$Model, levels = c( 'Infants', 'GBJ', 'GIST', 'AlexNet-IN', 'ResNet-IN', 'AlexNet-SIN', 'ResNet-SIN'))
df$Condition = factor(df$Condition, levels = c('SF','View', 'Size'))
df$Acc = as.numeric(as.character(df$Acc))
df$CI_Low = as.numeric(as.character(df$CI_Low))
df$CI_High = as.numeric(as.character(df$CI_High))
#Make figure for different SF
df.SF = df[df$Condition == 'SF' & df$Classifier == cl | df$Classifier == "Infant",]
#write.csv(df.SF,paste("Infant_Data/", ee, '_Table_', cl, '_SF.csv', sep = ""), row.names = FALSE)
ggplot(df.SF, aes(x = Model, y= Acc, fill = Model)) + geom_col(color = "black", width = .5, size = sLine) + scale_fill_manual(values=c('#32759b', ModelCols)) +
geom_linerange(aes(ymin =df.SF$CI_Low, ymax=df.SF$CI_High, x = Model), size = sLine) +
scale_y_continuous(breaks = seq(0, 1, by = .25), limits=c(0,1), expand = c(0,0)) + geom_hline(yintercept= .5, linetype="dashed", size = sLine) +
xlab("Models") + ylab("Categorization Score") + theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
axis.text.x = element_text(size=sAx, color = "black",angle =45,hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_text(size=sTitle),
axis.line = element_line(size = sLine),
axis.ticks= element_line(size = sLine, color = 'black'),
axis.ticks.length = unit(.09, "cm"),
legend.position ="none")
ggsave(filename =  paste('Infant_Data/Figures/', ee, '_', cl,'_SF.png', sep = ""), plot = last_plot(), dpi = 300,width =3, height = 3)
#reliability 'view' Figure
df.view = df[df$Condition == 'View' & df$Classifier == cl,]
ggplot(df.view, aes(x = Model, y= Acc, fill = Model)) + geom_col(color = "black", width = .5, size = sLine) + scale_fill_manual(values=ModelCols) +
geom_linerange(aes(ymin =df.view$CI_Low, ymax=df.view$CI_High, x = Model), size = sLine) +
scale_y_continuous(breaks = seq(0, 1, by = .25), limits=c(0,1), expand = c(0,0)) + geom_hline(yintercept= .5, linetype="dashed", size = sLine) +
xlab("Models") + ylab("Categorization Score") + theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
axis.text.x = element_text(size=sAx, color = "black",angle =45,hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_text(size=sTitle),
axis.line = element_line(size = sLine),
axis.ticks= element_line(size = sLine, color = 'black'),
axis.ticks.length = unit(.09, "cm"),
legend.position ="none")
ggsave(filename =  paste('Infant_Data/Figures/', ee, '_', cl,'_view.png', sep = ""), plot = last_plot(), dpi = 300,width =3, height = 3)
#Multi-class learning figure
df = as.data.frame(eval(as.name(paste(ee, '.Models_MSL', sep=""))))
df = df[df$Classifier == cl,]
df$Model = factor(df$Model, levels = c( 'GBJ', 'GIST', 'AlexNet-IN', 'ResNet-IN', 'AlexNet-SIN', 'ResNet-SIN'))
df$Acc = as.numeric(as.character(df$Acc))
df$CI_Low = as.numeric(as.character(df$CI_Low))
df$CI_High = as.numeric(as.character(df$CI_High))
ggplot(df, aes(x = Model, y= Acc, fill = Model)) + geom_col(color = "black", width = .5, size = sLine) + scale_fill_manual(values=ModelCols) +
geom_linerange(aes(ymin =df$CI_Low, ymax=df$CI_High, x = Model), size = sLine) +
scale_y_continuous(breaks = seq(0, 1, by = .25), limits=c(0,1), expand = c(0,0)) + geom_hline(yintercept= .5, linetype="dashed", size = sLine) +
xlab("Models") + ylab("Categorization Score") + theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
axis.text.x = element_text(size=sAx, color = "black",angle =45,hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_text(size=sTitle),
axis.line = element_line(size = sLine),
axis.ticks= element_line(size = sLine, color = 'black'),
axis.ticks.length = unit(.09, "cm"),
legend.position ="none")
ggsave(filename =  paste('Infant_Data/Figures/', ee, '_', cl,'_MSL.png', sep = ""), plot = last_plot(), dpi = 300,width =3, height = 3)
#Size line graph
df = as.data.frame(eval(as.name(paste(ee, '.Models_Size', sep=""))))
df$Model = factor(df$Model, levels = c('GBJ', 'GIST', 'AlexNet-IN', 'ResNet-IN', 'AlexNet-SIN', 'ResNet-SIN'))
df.size = df[df$Classifier == cl,]
df.size$Acc = as.numeric(as.character(df.size$Acc))
df.size$CI_Low = as.numeric(as.character(df.size$CI_Low))
df.size$CI_High = as.numeric(as.character(df.size$CI_High))
ggplot(df.size, aes(x=Condition, y=Acc,fill = Model, color = Model, group = Model)) +
geom_line(size = sLine, position=position_dodge(.35)) +
geom_linerange(aes(ymin=df.size$CI_Low, ymax=df.size$CI_High, x= Condition, color = Model),
position=position_dodge(.35), size = sLine) +
geom_point(data = df.size, aes(fill = Model, color = Model),position=position_dodge(.35), size = 1.75) +
scale_color_manual(values=ModelCols) + scale_fill_manual(values=ModelCols) +
xlab("Size Difference (%)") + ylab("Categorization Accuracy") +
geom_hline(yintercept= .5, linetype="dashed") +
theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
axis.text.x = element_text(size=sAx, color = "black"),
axis.title = element_text(size=sTitle),
axis.line = element_line(size = sLine),
axis.ticks= element_line(size = sLine, color = 'black'),
legend.text = element_text(size=sAx, color = "black"),
legend.title = element_text(size=sTitle, color = "black"))
ggsave(filename =  paste('Infant_Data/Figures/', ee, '_', cl,'_size.png', sep = ""), plot = last_plot(), dpi = 300,width =4, height = 2.6)
}
}
View(Exp1.Models)
writeclipboard(Exp1.Models, sep = "\t")
writeclipboard(Exp1.Models)
writeClipboard(Exp1.Models, sep = "\t")
writeClipboard(Exp1.Models)
write.table(Exp1.Models, sep = "\t", row.names = FALSE)
write.table(Exp1.Models, file="clipboard", sep = "\t", row.names = FALSE)
write.table(Exp2.Models, file="clipboard", sep = "\t", row.names = FALSE)
write.table(Exp1.Models_MSL, file="clipboard", sep = "\t", row.names = FALSE)
write.table(Exp2.Models_MSL, file="clipboard", sep = "\t", row.names = FALSE)
View(Exp1.Models)
View(Exp2.Models)
