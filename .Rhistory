library("readxl")
library(readxl)
rm(list = ls())
library(dplyr)
library(e1071)
library(psych)
setwd('C:/Users/vayze/Documents')
df = read.table("CassieData.csv",sep= ",", header = TRUE)
df = df[df$Exclude==0,]
corr.perm = matrix(0,2, iter)
# makes a 25 x 2 matrix of zeros
predicted = matrix(0,nrow(df),2)
View(predicted)
?scale
df= scale(df, center = TRUE, scale = TRUE)
df= as.data.frame(scale(df, center = TRUE, scale = TRUE))
View(df)
df = read.table("CassieData.csv",sep= ",", header = TRUE)
df = df[df$Exclude==0,]
df = read.table("CassieData.csv",sep= ",", header = TRUE)
df = df[df$Exclude==0,]
df$EmotNeg= scale(df$EmotNeg, center = TRUE, scale = TRUE)
df$L_Amyg_dAcc= scale(df$L_Amyg_dAcc, center = TRUE, scale = TRUE)
View(df)
ii = 1
leftout = df[ii,]
View(leftout)
rest = df[df$ID != leftout$ID,]
View(leftout)
View(rest)
#fit the regression
fit = lm(L_Amyg_dAcc ~ EmotNeg, data = rest)
summary(fit)
fit$coefficients[2]
View(fit)
fit[1][1]
fit[2][1]
fit[3][1]
fit[4][1]
fit[5][1]
fit[6][1]
fit[7][1]
fit[8][1]
fit[9][1]
fit[10][1]
fit[11][1]
fit[12][1]
fit[13][1]
fit[14][1]
fit[15][1]
fit[16][1]
fit
summary(fit)
sfit = summary(fit)
View(sfit)
sfit$coefficients
sfit$coefficients[2,2]
fit = lm(L_Amyg_dAcc ~ EmotNeg, data = rest)
Beta = fit$coefficients[2]
sfit = summary(fit)
SE = sfit$coefficients[2,2]
leftout_pred = Beta*leftout$EmotNeg + SE
leftout_pred
predicted[ii, 1] = leftout_pred
predicted[ii, 2] = leftout$L_Amyg_dAcc
View(predicted)
for (ii in 1:nrow(df)){
leftout = df[ii,]
rest = df[df$ID != leftout$ID,]
#fit the regression
fit = lm(L_Amyg_dAcc ~ EmotNeg, data = rest)
Beta = fit$coefficients[2]
sfit = summary(fit)
SE = sfit$coefficients[2,2]
leftout_pred = Beta*leftout$EmotNeg + SE
predicted[ii, 1] = leftout_pred
predicted[ii, 2] = leftout$L_Amyg_dAcc
}
View(predicted)
cor(predicted[,1], predicted[,2], use="complete.obs", method = 'pearson')
rm(list = ls())
library(ggplot2)
library(reshape2)
setwd('C:/Users/vayze/Desktop/GitHub_Repos/LiMA')
load('Infant_Data/LiMA_Model_Data_Size.RData')
load('Infant_Data/LiMA_Model_Data.RData')
load('Infant_Data/LiMA_Model_Data_MultiItem.RData')
View(Exp2.Models_MSL)
View(Exp2.Models_MSL)
rm(list = ls())
library(ggplot2)
library(reshape2)
library(dplyr)
library(boot)
setwd('C:/Users/vayze/Desktop/GitHub_Repos/LiMA')
exp = c('Exp1', 'Exp2')
cond = c('View', 'SF')
ModelType= c('GBJ', 'GIST', 'FF_IN', 'R_IN', 'FF_SN', 'R_SN')
classifier = c("OCS", "ISOF")
ModelCols = c('Exp', 'Model', 'Obj1', 'Obj2', 'Skel', 'SF', 'trAcc_ocs', 'tsAcc_ocs','trAcc_isof', 'tsAcc_isof', "Cond")
sz = 20
iter = 1000
alpha = .05
for (ee in 1:length(exp)){
#Load infant data
df.infant = read.table(paste("Infant_Data/Experiment_",ee,"_Infant_Data.csv", sep=""),header = TRUE, sep=",")
df.sf = read.table(paste("Results/LiMA_Exp", ee,"_allModels_OSL.csv", sep=""),header = FALSE, sep=",")
df.sf$Cond = "SF"
df = df.sf
colnames(df) = ModelCols
#Create coded score for different skeleton objects (e.g., a 0 cat accuracy is actually 100% correct)
df$OCS = df$tsAcc_ocs
df$OCS[df$Skel == 'Diff'] = 1-df$OCS[df$Skel == 'Diff']
df$ISOF = df$tsAcc_isof
df$ISOF[df$Skel == 'Diff'] = 1-df$ISOF[df$Skel == 'Diff']
#set up empty matrices for each condition (2) and classifier(2)  (the number of rows in matrix corresponds to the model)
bootMat.infant = matrix(0,1,iter)
bootMat.model = list(matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter),
matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter))
#Start boot test
for (ii in 1:iter){
#Sample with replacement for infants
tempInfant = sample_n(df.infant,nrow(df.infant), replace = TRUE)
novelDiff = mean(tempInfant$Novel) - mean(tempInfant$HabEnd)
famDiff = mean(tempInfant$Familiar) - mean(tempInfant$HabEnd)
if(novelDiff < 0){novelDiff = 0}
if(famDiff < 0){famDiff = 0}
bootMat.infant[1,ii] =  novelDiff / (novelDiff + famDiff)
n = 1
for (cl in classifier){
for (cc in cond){
for (mm in 1:length(ModelType)){
#Select appropriate data depending on condition
if(cc == 'View' ) {
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Same" & df$Cond == "SF",]
}else if (cc == 'SF' )  {
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Diff" & df$Cond == "SF",]
}else if (cc == "Size") {
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Same" & df$Cond == "Size",]
}
#Sample with replacement
tempMAT = sample_n(tempMAT,nrow(tempMAT), replace = TRUE)
#Add to appropriate matrix
bootMat.model[[n]][mm,ii] = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
}
n= n +1
}
}
}
#Write to file
ModelSummary = matrix(0,length(bootMat.model)*length(ModelType) +1,6)
#This section comiles the summary data
novelDiff = mean(df.infant$Novel) - mean(df.infant$HabEnd)
famDiff = mean(df.infant$Familiar) - mean(df.infant$HabEnd)
CI = quantile(bootMat.infant, probs = c(alpha/2, 1-alpha/2));
ModelSummary[1,] = c("Infant", "Infant", "SF", novelDiff/(novelDiff + famDiff),CI[1],CI[2])
ms = 2
n=1
for (cl in classifier){
for (cc in cond){
for (mm in 1:length(ModelType)){
#Select appropriate data depending on condition
if(cc == 'View' ) {
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Same" & df$Cond == "SF",]
}else if (cc == 'SF' )  {
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Diff" & df$Cond == "SF",]
}else if (cc == "Size") {
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Same" & df$Cond == "Size",]
}
tempMean = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
CI = quantile(bootMat.model[[n]][mm,], probs = c(alpha/2, 1-alpha/2));
ModelSummary[ms,] = c(ModelType[mm], cl, cc, tempMean,CI[1],CI[2])
ms= ms +1
}
n= n + 1
}
}
colnames(ModelSummary) = c("Model", "Classifier", "Condition", "Acc", "CI_Low", "CI_High")
assign(paste(exp[ee], '.Models', sep=""), ModelSummary)
}
save(Exp1.Models, Exp2.Models, file="Infant_Data/LiMA_Model_Data.RData")
View(Exp2.Models)
View(Exp1.Models)
rm(list = ls())
library(ggplot2)
library(reshape2)
library(dplyr)
library(boot)
setwd('C:/Users/vayze/Desktop/GitHub_Repos/LiMA')
exp = c('Exp1', 'Exp2')
ModelType= c('GBJ', 'GIST', 'FF_IN', 'R_IN', 'FF_SN', 'R_SN')
classifier = c("OCS", "ISOF")
ModelCols = c('Exp', 'Model', 'Obj1', 'Obj2', 'Skel', 'SF', 'trAcc_ocs', 'tsAcc_ocs','trAcc_isof', 'tsAcc_isof')
iter = 10000
alpha = .05
for (ee in 1:length(exp)){
#Load infant data
df = read.table(paste("Results/LiMA_Exp", ee,"_allModels_multiClass.csv", sep=""),header = FALSE, sep=",")
colnames(df) = ModelCols
#Create coded score for different skeleton objects (e.g., a 0 cat accuracy is actually 100% correct)
df$OCS = df$tsAcc_ocs
df$OCS[df$Skel == 'Diff'] = 1-df$OCS[df$Skel == 'Diff']
df$ISOF = df$tsAcc_isof
df$ISOF[df$Skel == 'Diff'] = 1-df$ISOF[df$Skel == 'Diff']
#set up empty matrices for each condition (2) and classifier(2)  (the number of rows in matrix corresponds to the model)
bootMat.model = list(matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter))
#Start boot test
for (ii in 1:iter){
n = 1
for (cl in classifier){
for (mm in 1:length(ModelType)){
tempMAT = df[df$Model == ModelType[mm],]
#Sample with replacement
tempMAT = sample_n(tempMAT,nrow(tempMAT), replace = TRUE)
#Add to appropriate matrix
bootMat.model[[n]][mm,ii] = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
}
n= n +1
}
}
#Write to file
ModelSummary = matrix(0,length(bootMat.model)*length(ModelType),5)
ms = 1
n=1
for (cl in classifier){
for (mm in 1:length(ModelType)){
tempMAT = df[df$Model == ModelType[mm],]
tempMean = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
CI = quantile(bootMat.model[[ms]][mm,], probs = c(alpha/2, 1-alpha/2));
ModelSummary[n,] = c(ModelType[mm], cl, tempMean,CI[1],CI[2])
n= n + 1
}
ms = ms +1
}
colnames(ModelSummary) = c("Model", "Classifier", "Acc", "CI_Low", "CI_High")
assign(paste(exp[ee], '.Models_MSL', sep=""), ModelSummary)
}
save(Exp1.Models_MSL, Exp2.Models_MSL, file="Infant_Data/LiMA_Model_Data_MultiItem.RData")
View(Exp2.Models_MSL)
rm(list = ls())
library(ggplot2)
library(reshape2)
library(dplyr)
library(boot)
setwd('C:/Users/vayze/Desktop/GitHub_Repos/LiMA')
exp = c('Exp1', 'Exp2')
cond = c('View', 'SF')
ModelType= c('GBJ', 'GIST', 'FF_IN', 'R_IN', 'FF_SN', 'R_SN')
classifier = c("OCS", "ISOF")
ModelCols = c('Exp', 'Model', 'Obj1', 'Obj2', 'Skel', 'SF', 'trAcc_ocs', 'tsAcc_ocs','trAcc_isof', 'tsAcc_isof', "Cond")
sz = 20
iter = 10000
alpha = .05
for (ee in 1:length(exp)){
#Load infant data
df.infant = read.table(paste("Infant_Data/Experiment_",ee,"_Infant_Data.csv", sep=""),header = TRUE, sep=",")
df.sf = read.table(paste("Results/LiMA_Exp", ee,"_allModels_OSL.csv", sep=""),header = FALSE, sep=",")
df.sf$Cond = "SF"
df = df.sf
colnames(df) = ModelCols
#Create coded score for different skeleton objects (e.g., a 0 cat accuracy is actually 100% correct)
df$OCS = df$tsAcc_ocs
df$OCS[df$Skel == 'Diff'] = 1-df$OCS[df$Skel == 'Diff']
df$ISOF = df$tsAcc_isof
df$ISOF[df$Skel == 'Diff'] = 1-df$ISOF[df$Skel == 'Diff']
#set up empty matrices for each condition (2) and classifier(2)  (the number of rows in matrix corresponds to the model)
bootMat.infant = matrix(0,1,iter)
bootMat.model = list(matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter),
matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter))
#Start boot test
for (ii in 1:iter){
#Sample with replacement for infants
tempInfant = sample_n(df.infant,nrow(df.infant), replace = TRUE)
novelDiff = mean(tempInfant$Novel) - mean(tempInfant$HabEnd)
famDiff = mean(tempInfant$Familiar) - mean(tempInfant$HabEnd)
if(novelDiff < 0){novelDiff = 0}
if(famDiff < 0){famDiff = 0}
bootMat.infant[1,ii] =  novelDiff / (novelDiff + famDiff)
n = 1
for (cl in classifier){
for (cc in cond){
for (mm in 1:length(ModelType)){
#Select appropriate data depending on condition
if(cc == 'View' ) {
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Same" & df$Cond == "SF",]
}else if (cc == 'SF' )  {
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Diff" & df$Cond == "SF",]
}else if (cc == "Size") {
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Same" & df$Cond == "Size",]
}
#Sample with replacement
tempMAT = sample_n(tempMAT,nrow(tempMAT), replace = TRUE)
#Add to appropriate matrix
bootMat.model[[n]][mm,ii] = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
}
n= n +1
}
}
}
#Write to file
ModelSummary = matrix(0,length(bootMat.model)*length(ModelType) +1,6)
#This section comiles the summary data
novelDiff = mean(df.infant$Novel) - mean(df.infant$HabEnd)
famDiff = mean(df.infant$Familiar) - mean(df.infant$HabEnd)
CI = quantile(bootMat.infant, probs = c(alpha/2, 1-alpha/2));
ModelSummary[1,] = c("Infant", "Infant", "SF", novelDiff/(novelDiff + famDiff),CI[1],CI[2])
ms = 2
n=1
for (cl in classifier){
for (cc in cond){
for (mm in 1:length(ModelType)){
#Select appropriate data depending on condition
if(cc == 'View' ) {
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Same" & df$Cond == "SF",]
}else if (cc == 'SF' )  {
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Diff" & df$Cond == "SF",]
}else if (cc == "Size") {
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Same" & df$Cond == "Size",]
}
tempMean = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
CI = quantile(bootMat.model[[n]][mm,], probs = c(alpha/2, 1-alpha/2));
ModelSummary[ms,] = c(ModelType[mm], cl, cc, tempMean,CI[1],CI[2])
ms= ms +1
}
n= n + 1
}
}
colnames(ModelSummary) = c("Model", "Classifier", "Condition", "Acc", "CI_Low", "CI_High")
assign(paste(exp[ee], '.Models', sep=""), ModelSummary)
}
save(Exp1.Models, Exp2.Models, file="Infant_Data/LiMA_Model_Data.RData")
View(Exp2.Models)
Exp2.Models$CI_High[20]
Exp2.Models[20,6]
Exp2.Models[20,6] = as.character(as.numeric(Exp2.Models[20,6])-.2)
View(Exp2.Models)
Exp2.Models[20,6] = as.character(as.numeric(Exp2.Models[20,6])+.2)
View(Exp2.Models)
Exp2.Models[20,6] = as.character(as.numeric(Exp2.Models[20,6])-.02)
View(Exp2.Models)
Exp2.Models[20,6] = as.character(as.numeric(Exp2.Models[20,6])+.01)
rm(list = ls())
library(ggplot2)
library(reshape2)
setwd('C:/Users/vayze/Desktop/GitHub_Repos/LiMA')
load('Infant_Data/LiMA_Model_Data_Size.RData')
load('Infant_Data/LiMA_Model_Data.RData')
load('Infant_Data/LiMA_Model_Data_MultiItem.RData')
exp = c('Exp1', 'Exp2')
classifier = c("OCS", "ISOF")
ModelType= c('Infant', 'FF_IN', 'R_IN', 'FF_SN', 'R_SN')
ActualName= c('Infants', 'AlexNet-IN', 'ResNet-IN', 'AlexNet-SIN', 'ResNet-SIN')
for (mm in 1:length(ModelType)){
Exp1.Models[,1][Exp1.Models[,1] == ModelType[mm]] = ActualName[mm]
Exp2.Models[,1][Exp2.Models[,1] == ModelType[mm]] = ActualName[mm]
Exp1.Models_MSL[,1][Exp1.Models_MSL[,1] == ModelType[mm]] = ActualName[mm]
Exp2.Models_MSL[,1][Exp2.Models_MSL[,1] == ModelType[mm]] = ActualName[mm]
Exp1.Models_Size[,1][Exp1.Models_Size[,1] == ModelType[mm]] = ActualName[mm]
Exp2.Models_Size[,1][Exp2.Models_Size[,1] == ModelType[mm]] = ActualName[mm]
}
sLine = .7
sAx = 8
sTitle = 10
sPlot = 2.5
ModelCols = c('#39a055', '#8ccf8a', '#c81b1d', '#ec3f2f', '#fa7051', '#fc9e80')
for (ee in exp){
for (cl in classifier){
#Preprocess data to have factors and conditions etc.
df = as.data.frame(eval(as.name(paste(ee, '.Models', sep=""))))
df$Model = factor(df$Model, levels = c( 'Infants', 'GBJ', 'GIST', 'AlexNet-IN', 'ResNet-IN', 'AlexNet-SIN', 'ResNet-SIN'))
df$Condition = factor(df$Condition, levels = c('SF','View', 'Size'))
df$Acc = as.numeric(as.character(df$Acc))
df$CI_Low = as.numeric(as.character(df$CI_Low))
df$CI_High = as.numeric(as.character(df$CI_High))
#Make figure for different SF
df.SF = df[df$Condition == 'SF' & df$Classifier == cl | df$Classifier == "Infant",]
#write.csv(df.SF,paste("Infant_Data/", ee, '_Table_', cl, '_SF.csv', sep = ""), row.names = FALSE)
ggplot(df.SF, aes(x = Model, y= Acc, fill = Model)) + geom_col(color = "black", width = .5, size = sLine) + scale_fill_manual(values=c('#32759b', ModelCols)) +
geom_linerange(aes(ymin =df.SF$CI_Low, ymax=df.SF$CI_High, x = Model), size = sLine) +
scale_y_continuous(breaks = seq(0, 1, by = .25), limits=c(0,1), expand = c(0,0)) + geom_hline(yintercept= .5, linetype="dashed", size = sLine) +
xlab("Models") + ylab("Categorization Score") + theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
axis.text.x = element_text(size=sAx, color = "black",angle =45,hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_text(size=sTitle),
axis.line = element_line(size = sLine),
axis.ticks= element_line(size = sLine, color = 'black'),
axis.ticks.length = unit(.09, "cm"),
legend.position ="none")
ggsave(filename =  paste('Infant_Data/Figures/', ee, '_', cl,'_SF.png', sep = ""), plot = last_plot(), dpi = 300,width =3, height = 3)
#reliability 'view' Figure
df.view = df[df$Condition == 'View' & df$Classifier == cl,]
ggplot(df.view, aes(x = Model, y= Acc, fill = Model)) + geom_col(color = "black", width = .5, size = sLine) + scale_fill_manual(values=ModelCols) +
geom_linerange(aes(ymin =df.view$CI_Low, ymax=df.view$CI_High, x = Model), size = sLine) +
scale_y_continuous(breaks = seq(0, 1, by = .25), limits=c(0,1), expand = c(0,0)) + geom_hline(yintercept= .5, linetype="dashed", size = sLine) +
xlab("Models") + ylab("Categorization Score") + theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
axis.text.x = element_text(size=sAx, color = "black",angle =45,hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_text(size=sTitle),
axis.line = element_line(size = sLine),
axis.ticks= element_line(size = sLine, color = 'black'),
axis.ticks.length = unit(.09, "cm"),
legend.position ="none")
ggsave(filename =  paste('Infant_Data/Figures/', ee, '_', cl,'_view.png', sep = ""), plot = last_plot(), dpi = 300,width =3, height = 3)
#Multi-class learning figure
df = as.data.frame(eval(as.name(paste(ee, '.Models_MSL', sep=""))))
df = df[df$Classifier == cl,]
df$Model = factor(df$Model, levels = c( 'GBJ', 'GIST', 'AlexNet-IN', 'ResNet-IN', 'AlexNet-SIN', 'ResNet-SIN'))
df$Acc = as.numeric(as.character(df$Acc))
df$CI_Low = as.numeric(as.character(df$CI_Low))
df$CI_High = as.numeric(as.character(df$CI_High))
ggplot(df, aes(x = Model, y= Acc, fill = Model)) + geom_col(color = "black", width = .5, size = sLine) + scale_fill_manual(values=ModelCols) +
geom_linerange(aes(ymin =df$CI_Low, ymax=df$CI_High, x = Model), size = sLine) +
scale_y_continuous(breaks = seq(0, 1, by = .25), limits=c(0,1), expand = c(0,0)) + geom_hline(yintercept= .5, linetype="dashed", size = sLine) +
xlab("Models") + ylab("Categorization Score") + theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
axis.text.x = element_text(size=sAx, color = "black",angle =45,hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_text(size=sTitle),
axis.line = element_line(size = sLine),
axis.ticks= element_line(size = sLine, color = 'black'),
axis.ticks.length = unit(.09, "cm"),
legend.position ="none")
ggsave(filename =  paste('Infant_Data/Figures/', ee, '_', cl,'_MSL.png', sep = ""), plot = last_plot(), dpi = 300,width =3, height = 3)
#Size line graph
df = as.data.frame(eval(as.name(paste(ee, '.Models_Size', sep=""))))
df$Model = factor(df$Model, levels = c('GBJ', 'GIST', 'AlexNet-IN', 'ResNet-IN', 'AlexNet-SIN', 'ResNet-SIN'))
df.size = df[df$Classifier == cl,]
df.size$Acc = as.numeric(as.character(df.size$Acc))
df.size$CI_Low = as.numeric(as.character(df.size$CI_Low))
df.size$CI_High = as.numeric(as.character(df.size$CI_High))
ggplot(df.size, aes(x=Condition, y=Acc,fill = Model, color = Model, group = Model)) +
geom_line(size = sLine, position=position_dodge(.35)) +
geom_linerange(aes(ymin=df.size$CI_Low, ymax=df.size$CI_High, x= Condition, color = Model),
position=position_dodge(.35), size = sLine) +
geom_point(data = df.size, aes(fill = Model, color = Model),position=position_dodge(.35), size = 1.75) +
scale_color_manual(values=ModelCols) + scale_fill_manual(values=ModelCols) +
xlab("Size Difference (%)") + ylab("Categorization Accuracy") +
geom_hline(yintercept= .5, linetype="dashed") +
theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
axis.text.x = element_text(size=sAx, color = "black"),
axis.title = element_text(size=sTitle),
axis.line = element_line(size = sLine),
axis.ticks= element_line(size = sLine, color = 'black'),
legend.text = element_text(size=sAx, color = "black"),
legend.title = element_text(size=sTitle, color = "black"))
ggsave(filename =  paste('Infant_Data/Figures/', ee, '_', cl,'_size.png', sep = ""), plot = last_plot(), dpi = 300,width =4, height = 2.6)
}
}
View(Exp1.Models_MSL)
View(Exp2.Models_MSL)
