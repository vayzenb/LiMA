library("readxl")
library(readxl)
rm(list = ls())
library(ggplot2)
library(reshape2)
setwd('C:/Users/vayze/Desktop/GitHub_Repos/LiMA')
load('Infant_Data/LiMA_data_all.RData')
load('Infant_Data/LiMA_Model_Data.RData')
ModelType= c( 'FF_IN', 'R_IN', 'FF_SN', 'R_SN')
ActualName= c( 'AlexNet-IN', 'ResNet-IN', 'AlexNet-SN', 'ResNet-SN')
for (mm in 1:length(ModelType)){
Exp1.Models[,1][Exp1.Models[,1] == ModelType[mm]] = ActualName[mm]
Exp2.Models[,1][Exp2.Models[,1] == ModelType[mm]] = ActualName[mm]
}
sLine = .7
sAx = 8
sTitle = 10
sPlot = 2.5
ModelCols = c('#39a055', '#8ccf8a', '#c81b1d', '#ec3f2f', '#fa7051', '#fc9e80')
#Exp 1 MODEL PLOTS
Exp1.Models = as.data.frame(Exp1.Models)
Exp1.Models$Model = factor(Exp1.Models$Model, levels = c( 'Infant', 'GBJ', 'GIST', 'AlexNet-IN', 'ResNet-IN', 'AlexNet-SN', 'ResNet-SN'))
Exp1.Models$Condition = factor(Exp1.Models$Condition, levels = c('SF','View', 'Size'))
Exp1.Models$Acc = as.numeric(as.character(Exp1.Models$Acc))
Exp1.Models$CI_Low = as.numeric(as.character(Exp1.Models$CI_Low))
Exp1.Models$CI_High = as.numeric(as.character(Exp1.Models$CI_High))
#Exp1.Models$roworder = allCondNums
#attach(Exp1.Models)
#Exp1.Models = Exp1.Models[order(roworder),]
#Exp1.Control$roworder = colNums
#attach(Exp1.Control)
#Exp1.Control = Exp1.Control[order(roworder),]
#For Exp1 SF condition; ISOF classifier
Exp1.SF = Exp1.Models[Exp1.Models$Condition == 'SF' & Exp1.Models$Classifier == "ISOF" | Exp1.Models$Classifier == "Infant",]
ggplot(Exp1.SF, aes(x = Model, y= Acc, fill = Model)) + geom_col(color = "black", width = .5, size = sLine) + scale_fill_manual(values=c('#32759b', ModelCols)) +
geom_linerange(aes(ymin =Exp1.SF$CI_Low, ymax=Exp1.SF$CI_High, x = Model), size = sLine) +
scale_y_continuous(breaks = seq(0, 1, by = .25), limits=c(0,1), expand = c(0,0)) + geom_hline(yintercept= .5, linetype="dashed", size = sLine) +
xlab("Models") + ylab("Categorization Accuracy") + theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
axis.text.x = element_text(size=sAx, color = "black",angle =45,hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_text(size=sTitle),
axis.line = element_line(size = sLine),
axis.ticks= element_line(size = sLine, color = 'black'),
axis.ticks.length = unit(.09, "cm"),
legend.position ="none")
ggsave(filename =  'Infant_Data/Figures/Exp1_models_SF.png', plot = last_plot(), dpi = 300,width =3, height = 3)
#Experiment 2 figures
Exp2.Models = as.data.frame(Exp2.Models)
Exp2.Models$Model = factor(Exp2.Models$Model, levels = c( 'Infant', 'GBJ', 'GIST', 'AlexNet-IN', 'ResNet-IN', 'AlexNet-SN', 'ResNet-SN'))
Exp2.Models$Condition = factor(Exp2.Models$Condition, levels = c('SF','View', 'Size'))
Exp2.Models$Acc = as.numeric(as.character(Exp2.Models$Acc))
Exp2.Models$CI_Low = as.numeric(as.character(Exp2.Models$CI_Low))
Exp2.Models$CI_High = as.numeric(as.character(Exp2.Models$CI_High))
#For Exp1 SF condition; ISOF classifier
Exp2.SF = Exp2.Models[Exp2.Models$Condition == 'SF' & Exp2.Models$Classifier == "ISOF" | Exp2.Models$Classifier == "Infant",]
ggplot(Exp2.SF, aes(x = Model, y= Acc, fill = Model)) + geom_col(color = "black", width = .5, size = sLine) + scale_fill_manual(values=c('#32759b', ModelCols)) +
geom_linerange(aes(ymin =Exp2.SF$CI_Low, ymax=Exp2.SF$CI_High, x = Model), size = sLine) +
scale_y_continuous(breaks = seq(0, 1, by = .25), limits=c(0,1), expand = c(0,0)) + geom_hline(yintercept= .5, linetype="dashed", size = sLine) +
xlab("Models") + ylab("Categorization Accuracy") + theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
axis.text.x = element_text(size=sAx, color = "black",angle =45,hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_text(size=sTitle),
axis.line = element_line(size = sLine),
axis.ticks= element_line(size = sLine, color = 'black'),
axis.ticks.length = unit(.09, "cm"),
legend.position ="none")
ggsave(filename =  'Infant_Data/Figures/Exp2_models_SF.png', plot = last_plot(), dpi = 300,width =3, height = 3)
View(Exp1.SF)
View(Exp2.SF)
rm(list = ls())
library(ggplot2)
library(reshape2)
library(dplyr)
library(boot)
setwd('C:/Users/vayze/Desktop/GitHub_Repos/LiMA')
exp = c('Exp1', 'Exp2')
ModelType= c('GBJ', 'GIST', 'FF_IN', 'R_IN', 'FF_SN', 'R_SN')
classifier = c("OCS", "ISOF")
ModelCols = c('Exp', 'Model', 'Obj1', 'Obj2', 'Skel', 'SF', 'trAcc_ocs', 'tsAcc_ocs','trAcc_isof', 'tsAcc_isof', "Cond")
imSize = c(10, 20, 30, 40, 50)
iter = 10
alpha = .05
ee = 1
sz = 10
df.sz = read.table(paste("Results/LiMA_Exp", ee,"_allModels_AllClassifiers_Size", sz,".csv", sep=""),header = FALSE, sep=",")
View(df.sz)
df.sz$Cond = sz
colnames(df) = ModelCols
df = read.table(paste("Results/LiMA_Exp", ee,"_allModels_AllClassifiers_Size", sz,".csv", sep=""),header = FALSE, sep=",")
df$Cond = sz
colnames(df) = ModelCols
#Create coded score for different skeleton objects (e.g., a 0 cat accuracy is actually 100% correct)
df$OCS = df$tsAcc_ocs
df$OCS[df$Skel == 'Diff'] = 1-df$OCS[df$Skel == 'Diff']
df = read.table(paste("Results/LiMA_Exp", ee,"_allModels_AllClassifiers_Size", sz,".csv", sep=""),header = FALSE, sep=",")
df$Cond = sz
colnames(df) = ModelCols
df[df == "None"] = NA
df = df[complete.cases(df)]
df[df == "None"] = NA
View(df)
df = na.omit(df)
View(df)
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Same",]
mm = 1
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Same",]
View(tempMAT)
#Sample with replacement
tempMAT = sample_n(tempMAT,nrow(tempMAT), replace = TRUE)
#Add to appropriate matrix
bootMat.model[[n]][mm,ii] = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
cl = "ISOF"
#Add to appropriate matrix
bootMat.model[[n]][mm,ii] = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Same",]
#Sample with replacement
tempMAT = sample_n(tempMAT,nrow(tempMAT), replace = TRUE)
(mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
View(df.sz)
df = read.table(paste("Results/LiMA_Exp", ee,"_allModels_AllClassifiers_Size", sz,".csv", sep=""),header = FALSE, sep=",")
df$Cond = sz
colnames(df) = ModelCols
df[df == "None"] = NA
df = na.omit(df)
#Create coded score for different skeleton objects (e.g., a 0 cat accuracy is actually 100% correct)
df$OCS = df$tsAcc_ocs
df$OCS[df$Skel == 'Diff'] = 1-df$OCS[df$Skel == 'Diff']
df = read.table(paste("Results/LiMA_Exp", ee,"_allModels_AllClassifiers_Size", sz,".csv", sep=""),header = FALSE, sep=",")
View(df)
df$Cond = sz
colnames(df) = ModelCols
df[df == "None"] = NA
df = na.omit(df)
#Create coded score for different skeleton objects (e.g., a 0 cat accuracy is actually 100% correct)
df$OCS = df$tsAcc_ocs
#Create coded score for different skeleton objects (e.g., a 0 cat accuracy is actually 100% correct)
df$OCS = as.numeric(df$tsAcc_ocs)
df$OCS[df$Skel == 'Diff'] = 1-df$OCS[df$Skel == 'Diff']
df$ISOF = as.numeric(df$tsAcc_isof)
df$ISOF[df$Skel == 'Diff'] = 1-df$ISOF[df$Skel == 'Diff']
#set up empty matrices for each condition and classifier (the number of rows corresponds to the model
bootMat.model = list(matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter),
matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter))
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Same",]
#Sample with replacement
tempMAT = sample_n(tempMAT,nrow(tempMAT), replace = TRUE)
#Add to appropriate matrix
bootMat.model[[n]][mm,ii] = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
#Add to appropriate matrix
bootMat.model[[n]][mm,ii] = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
n = 1
#Add to appropriate matrix
bootMat.model[[n]][mm,ii] = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
ii = 1
#Add to appropriate matrix
bootMat.model[[n]][mm,ii] = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
View(bootMat.model)
(mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE)
(mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE)
View(tempMAT)
df = read.table(paste("Results/LiMA_Exp", ee,"_allModels_AllClassifiers_Size", sz,".csv", sep=""),header = FALSE, sep=",")
df$Cond = sz
colnames(df) = ModelCols
df[df == "None"] = NA
df = na.omit(df)
#Create coded score for different skeleton objects (e.g., a 0 cat accuracy is actually 100% correct)
df$OCS = as.numeric(as.character(df$tsAcc_ocs))
df$OCS[df$Skel == 'Diff'] = 1-df$OCS[df$Skel == 'Diff']
df$ISOF = as.numeric(as.character(df$tsAcc_isof))
df$ISOF[df$Skel == 'Diff'] = 1-df$ISOF[df$Skel == 'Diff']
#set up empty matrices for each condition and classifier (the number of rows corresponds to the model
bootMat.model = list(matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter),
matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter))
n= 1
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Same",]
#Sample with replacement
tempMAT = sample_n(tempMAT,nrow(tempMAT), replace = TRUE)
#Add to appropriate matrix
bootMat.model[[n]][mm,ii] = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
df = read.table(paste("Results/LiMA_Exp", ee,"_allModels_AllClassifiers_Size", sz,".csv", sep=""),header = FALSE, sep=",")
df$Cond = sz
colnames(df) = ModelCols
df[df == "None"] = NA
df = na.omit(df)
#Create coded score for different skeleton objects (e.g., a 0 cat accuracy is actually 100% correct)
df$OCS = as.numeric(as.character(df$tsAcc_ocs))
df$OCS[df$Skel == 'Diff'] = 1-df$OCS[df$Skel == 'Diff']
df$ISOF = as.numeric(as.character(df$tsAcc_isof))
df$ISOF[df$Skel == 'Diff'] = 1-df$ISOF[df$Skel == 'Diff']
#set up empty matrices for each condition and classifier (the number of rows corresponds to the model
bootMat.model = list(matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter),
matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter))
n= 1
#Start boot test
for (ii in 1:iter){
for (cl in classifier){
for (mm in 1:length(ModelType)){
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Same",]
#Sample with replacement
tempMAT = sample_n(tempMAT,nrow(tempMAT), replace = TRUE)
#Add to appropriate matrix
bootMat.model[[n]][mm,ii] = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
}
n= n +1
}
}
}
df = read.table(paste("Results/LiMA_Exp", ee,"_allModels_AllClassifiers_Size", sz,".csv", sep=""),header = FALSE, sep=",")
df$Cond = sz
colnames(df) = ModelCols
df[df == "None"] = NA
df = na.omit(df)
#Create coded score for different skeleton objects (e.g., a 0 cat accuracy is actually 100% correct)
df$OCS = as.numeric(as.character(df$tsAcc_ocs))
df$OCS[df$Skel == 'Diff'] = 1-df$OCS[df$Skel == 'Diff']
df$ISOF = as.numeric(as.character(df$tsAcc_isof))
df$ISOF[df$Skel == 'Diff'] = 1-df$ISOF[df$Skel == 'Diff']
#set up empty matrices for each condition and classifier (the number of rows corresponds to the model
bootMat.model = list(matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter),
matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter))
n= 1
#Start boot test
for (ii in 1:iter){
for (cl in classifier){
for (mm in 1:length(ModelType)){
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Same",]
#Sample with replacement
tempMAT = sample_n(tempMAT,nrow(tempMAT), replace = TRUE)
#Add to appropriate matrix
bootMat.model[[n]][mm,ii] = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
}
n= n +1
}
}
}
df = read.table(paste("Results/LiMA_Exp", ee,"_allModels_AllClassifiers_Size", sz,".csv", sep=""),header = FALSE, sep=",")
df$Cond = sz
colnames(df) = ModelCols
df[df == "None"] = NA
df = na.omit(df)
#Create coded score for different skeleton objects (e.g., a 0 cat accuracy is actually 100% correct)
df$OCS = as.numeric(as.character(df$tsAcc_ocs))
df$OCS[df$Skel == 'Diff'] = 1-df$OCS[df$Skel == 'Diff']
df$ISOF = as.numeric(as.character(df$tsAcc_isof))
df$ISOF[df$Skel == 'Diff'] = 1-df$ISOF[df$Skel == 'Diff']
#set up empty matrices for each condition and classifier (the number of rows corresponds to the model
bootMat.model = list(matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter),
matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter))
#Start boot test
for (ii in 1:iter){
for (cl in classifier){
n= 1
for (mm in 1:length(ModelType)){
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Same",]
#Sample with replacement
tempMAT = sample_n(tempMAT,nrow(tempMAT), replace = TRUE)
#Add to appropriate matrix
bootMat.model[[n]][mm,ii] = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
}
n= n +1
}
}
}
df = read.table(paste("Results/LiMA_Exp", ee,"_allModels_AllClassifiers_Size", sz,".csv", sep=""),header = FALSE, sep=",")
df$Cond = sz
colnames(df) = ModelCols
df[df == "None"] = NA
df = na.omit(df)
#Create coded score for different skeleton objects (e.g., a 0 cat accuracy is actually 100% correct)
df$OCS = as.numeric(as.character(df$tsAcc_ocs))
df$OCS[df$Skel == 'Diff'] = 1-df$OCS[df$Skel == 'Diff']
df$ISOF = as.numeric(as.character(df$tsAcc_isof))
df$ISOF[df$Skel == 'Diff'] = 1-df$ISOF[df$Skel == 'Diff']
#set up empty matrices for each condition and classifier (the number of rows corresponds to the model
bootMat.model = list(matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter),
matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter))
#Start boot test
for (ii in 1:iter){
for (cl in classifier){
n= 1
for (mm in 1:length(ModelType)){
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Same",]
#Sample with replacement
tempMAT = sample_n(tempMAT,nrow(tempMAT), replace = TRUE)
#Add to appropriate matrix
bootMat.model[[n]][mm,ii] = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
}
n= n +1
}
}
View(bootMat.model)
View(bootMat.model)
df = read.table(paste("Results/LiMA_Exp", ee,"_allModels_AllClassifiers_Size", sz,".csv", sep=""),header = FALSE, sep=",")
df$Cond = sz
colnames(df) = ModelCols
df[df == "None"] = NA
df = na.omit(df)
#Create coded score for different skeleton objects (e.g., a 0 cat accuracy is actually 100% correct)
df$OCS = as.numeric(as.character(df$tsAcc_ocs))
df$OCS[df$Skel == 'Diff'] = 1-df$OCS[df$Skel == 'Diff']
df$ISOF = as.numeric(as.character(df$tsAcc_isof))
df$ISOF[df$Skel == 'Diff'] = 1-df$ISOF[df$Skel == 'Diff']
#set up empty matrices for each condition and classifier (the number of rows corresponds to the model
bootMat.model = list(matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter),
matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter))
#Start boot test
for (ii in 1:iter){
n= 1
for (cl in classifier){
for (mm in 1:length(ModelType)){
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Same",]
#Sample with replacement
tempMAT = sample_n(tempMAT,nrow(tempMAT), replace = TRUE)
#Add to appropriate matrix
bootMat.model[[n]][mm,ii] = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
}
n= n +1
}
}
View(bootMat.model)
df = read.table(paste("Results/LiMA_Exp", ee,"_allModels_AllClassifiers_Size", sz,".csv", sep=""),header = FALSE, sep=",")
df$Cond = sz
colnames(df) = ModelCols
df[df == "None"] = NA
df = na.omit(df)
#Create coded score for different skeleton objects (e.g., a 0 cat accuracy is actually 100% correct)
df$OCS = as.numeric(as.character(df$tsAcc_ocs))
df$OCS[df$Skel == 'Diff'] = 1-df$OCS[df$Skel == 'Diff']
df$ISOF = as.numeric(as.character(df$tsAcc_isof))
df$ISOF[df$Skel == 'Diff'] = 1-df$ISOF[df$Skel == 'Diff']
#set up empty matrices for each condition and classifier (the number of rows corresponds to the model
bootMat.model = list(matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter),
matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter))
n= 1
#Start boot test
for (ii in 1:iter){
for (cl in classifier){
for (mm in 1:length(ModelType)){
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Same",]
#Sample with replacement
tempMAT = sample_n(tempMAT,nrow(tempMAT), replace = TRUE)
#Add to appropriate matrix
bootMat.model[[n]][mm,ii] = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
}
n= n +1
}
}
