for (cl in classifier){
for (cc in cond){
for (mm in 1:length(ModelType)){
#Select appropriate data depending on condition
if(cc == 'View' ) {
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Same" & df$Cond == "SF",]
}else if (cc == 'SF' )  {
tempMAT = df[df$Model == ModelType[mm] & df$SF == "Diff" & df$Cond == "SF",]
}else if (cc == "Skel") {
tempMAT = df[df$Model == ModelType[mm] & df$Skel == "Diff" & df$Cond == "SF",]
}
if (cc == 'SF' | cc == 'View')  {
tempMean = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
}else if (cc == "Skel") {
tempMean = (mean(tempMAT[[paste(cl, "_SF",sep="")]][tempMAT$SF=="Same"], na.rm = TRUE) +
mean(tempMAT[[paste(cl, "_SF",sep="")]][tempMAT$SF=="Diff"], na.rm = TRUE))/2
}
#tempMean = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
#             mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
CI = quantile(bootMat.model[[n]][mm,], probs = c(alpha/2, 1-alpha/2));
ModelSummary[ms,] = c(ModelType[mm], cl, cc, tempMean,CI[1],CI[2])
ms= ms +1
}
n= n + 1
}
}
colnames(ModelSummary) = c("Model", "Classifier", "Condition", "Acc", "CI_Low", "CI_High")
assign(paste(exp[ee], '.Models', sep=""), ModelSummary)
}
save(Exp1.Models, Exp2.Models, file="Infant_Data/LiMA_Model_Data.RData")
View(Exp1.Models)
View(Exp2.Models)
rm(list = ls())
library(ggplot2)
library(reshape2)
library(dplyr)
library(boot)
setwd('C:/Users/vayze/Desktop/GitHub_Repos/LiMA')
exp = c('Exp1', 'Exp2')
ModelType= c('GBJ', 'GIST', 'FF_IN', 'R_IN', 'FF_SN', 'R_SN', 'CorNet_Z', 'CorNet_S', 'SayCam')
classifier = c("OCS", "ISOF")
ModelCols = c('Exp', 'Model', 'Obj1', 'Obj2', 'Skel', 'SF', 'trAcc_ocs', 'tsAcc_ocs','trAcc_isof', 'tsAcc_isof')
iter = 10000
alpha = .05
for (ee in 1:length(exp)){
#Load infant data
df = read.table(paste("Results/LiMA_Exp", ee,"_allModels_MSL.csv", sep=""),header = FALSE, sep=",")
colnames(df) = ModelCols
#Create coded score for different skeleton objects (e.g., a 0 cat accuracy is actually 100% correct)
df$OCS = df$tsAcc_ocs
df$OCS[df$Skel == 'Diff'] = 1-df$OCS[df$Skel == 'Diff']
df$ISOF = df$tsAcc_isof
df$ISOF[df$Skel == 'Diff'] = 1-df$ISOF[df$Skel == 'Diff']
#set up empty matrices for each condition (2) and classifier(2)  (the number of rows in matrix corresponds to the model)
bootMat.model = list(matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter))
#Start boot test
for (ii in 1:iter){
n = 1
for (cl in classifier){
for (mm in 1:length(ModelType)){
tempMAT = df[df$Model == ModelType[mm],]
#Sample with replacement
tempMAT = sample_n(tempMAT,nrow(tempMAT), replace = TRUE)
#Add to appropriate matrix
bootMat.model[[n]][mm,ii] = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
}
n= n +1
}
}
#Write to file
ModelSummary = matrix(0,length(bootMat.model)*length(ModelType),5)
ms = 1
n=1
for (cl in classifier){
for (mm in 1:length(ModelType)){
tempMAT = df[df$Model == ModelType[mm],]
tempMean = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
CI = quantile(bootMat.model[[ms]][mm,], probs = c(alpha/2, 1-alpha/2));
ModelSummary[n,] = c(ModelType[mm], cl, tempMean,CI[1],CI[2])
n= n + 1
}
ms = ms +1
}
colnames(ModelSummary) = c("Model", "Classifier", "Acc", "CI_Low", "CI_High")
assign(paste(exp[ee], '.Models_MSL', sep=""), ModelSummary)
}
save(Exp1.Models_MSL, Exp2.Models_MSL, file="Infant_Data/LiMA_Model_Data_MultiItem.RData")
0/2
rm(list = ls())
library(ggplot2)
library(reshape2)
library(dplyr)
library(boot)
setwd('C:/Users/vayze/Desktop/GitHub_Repos/LiMA')
exp = c('Exp1', 'Exp2')
ModelType= c('GBJ', 'GIST', 'FF_IN', 'R_IN', 'FF_SN', 'R_SN', 'CorNet_Z', 'CorNet_S', 'SayCam')
classifier = c("OCS", "ISOF")
ModelCols = c('Exp', 'Model', 'Obj1', 'Obj2', 'Skel', 'SF', 'trAcc_ocs', 'tsAcc_ocs','trAcc_isof', 'tsAcc_isof')
iter = 10000
alpha = .05
for (ee in 1:length(exp)){
#Load infant data
df = read.table(paste("Results/LiMA_Exp", ee,"_allModels_MSL.csv", sep=""),header = FALSE, sep=",")
colnames(df) = ModelCols
#Create coded score for different skeleton objects (e.g., a 0 cat accuracy is actually 100% correct)
df$OCS = df$tsAcc_ocs
df$OCS[df$Skel == 'Diff'] = 1-df$OCS[df$Skel == 'Diff']
df$ISOF = df$tsAcc_isof
df$ISOF[df$Skel == 'Diff'] = 1-df$ISOF[df$Skel == 'Diff']
#set up empty matrices for each condition (2) and classifier(2)  (the number of rows in matrix corresponds to the model)
bootMat.model = list(matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter))
#Start boot test
for (ii in 1:iter){
n = 1
for (cl in classifier){
for (mm in 1:length(ModelType)){
tempMAT = df[df$Model == ModelType[mm],]
#Sample with replacement
tempMAT = sample_n(tempMAT,nrow(tempMAT), replace = TRUE)
#Add to appropriate matrix
bootMat.model[[n]][mm,ii] = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
}
n= n +1
}
}
#Write to file
ModelSummary = matrix(0,length(bootMat.model)*length(ModelType),5)
ms = 1
n=1
for (cl in classifier){
for (mm in 1:length(ModelType)){
tempMAT = df[df$Model == ModelType[mm],]
tempMean = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
CI = quantile(bootMat.model[[ms]][mm,], probs = c(alpha/2, 1-alpha/2));
ModelSummary[n,] = c(ModelType[mm], cl, tempMean,CI[1],CI[2])
n= n + 1
}
ms = ms +1
}
colnames(ModelSummary) = c("Model", "Classifier", "Acc", "CI_Low", "CI_High")
assign(paste(exp[ee], '.Models_MSL', sep=""), ModelSummary)
}
save(Exp1.Models_MSL, Exp2.Models_MSL, file="Infant_Data/LiMA_Model_Data_MultiItem.RData")
rm(list = ls())
library(ggplot2)
library(reshape2)
library(dplyr)
library(boot)
setwd('C:/Users/vayze/Desktop/GitHub_Repos/LiMA')
exp = c('Exp1', 'Exp2')
ModelType= c('GBJ', 'GIST', 'FF_IN', 'R_IN', 'FF_SN', 'R_SN', 'CorNet_Z', 'CorNet_S',)
classifier = c("OCS", "ISOF")
ModelCols = c('Exp', 'Model', 'Obj1', 'Obj2', 'Skel', 'SF', 'trAcc_ocs', 'tsAcc_ocs','trAcc_isof', 'tsAcc_isof')
iter = 10
alpha = .05
for (ee in 1:length(exp)){
#Load infant data
df = read.table(paste("Results/LiMA_Exp", ee,"_allModels_MSL.csv", sep=""),header = FALSE, sep=",")
colnames(df) = ModelCols
#Create coded score for different skeleton objects (e.g., a 0 cat accuracy is actually 100% correct)
df$OCS = df$tsAcc_ocs
df$OCS[df$Skel == 'Diff'] = 1-df$OCS[df$Skel == 'Diff']
df$ISOF = df$tsAcc_isof
df$ISOF[df$Skel == 'Diff'] = 1-df$ISOF[df$Skel == 'Diff']
#set up empty matrices for each condition (2) and classifier(2)  (the number of rows in matrix corresponds to the model)
bootMat.model = list(matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter))
#Start boot test
for (ii in 1:iter){
n = 1
for (cl in classifier){
for (mm in 1:length(ModelType)){
tempMAT = df[df$Model == ModelType[mm],]
#Sample with replacement
tempMAT = sample_n(tempMAT,nrow(tempMAT), replace = TRUE)
#Add to appropriate matrix
bootMat.model[[n]][mm,ii] = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
}
n= n +1
}
}
#Write to file
ModelSummary = matrix(0,length(bootMat.model)*length(ModelType),5)
ms = 1
n=1
for (cl in classifier){
for (mm in 1:length(ModelType)){
tempMAT = df[df$Model == ModelType[mm],]
tempMean = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
CI = quantile(bootMat.model[[ms]][mm,], probs = c(alpha/2, 1-alpha/2));
ModelSummary[n,] = c(ModelType[mm], cl, tempMean,CI[1],CI[2])
n= n + 1
}
ms = ms +1
}
colnames(ModelSummary) = c("Model", "Classifier", "Acc", "CI_Low", "CI_High")
assign(paste(exp[ee], '.Models_MSL', sep=""), ModelSummary)
}
save(Exp1.Models_MSL, Exp2.Models_MSL, file="Infant_Data/LiMA_Model_Data_MultiItem.RData")
rm(list = ls())
library(ggplot2)
library(reshape2)
library(dplyr)
library(boot)
setwd('C:/Users/vayze/Desktop/GitHub_Repos/LiMA')
exp = c('Exp1', 'Exp2')
ModelType= c('GBJ', 'GIST', 'FF_IN', 'R_IN', 'FF_SN', 'R_SN', 'CorNet_Z', 'CorNet_S','SayCam')
classifier = c("OCS", "ISOF")
ModelCols = c('Exp', 'Model', 'Obj1', 'Obj2', 'Skel', 'SF', 'trAcc_ocs', 'tsAcc_ocs','trAcc_isof', 'tsAcc_isof')
iter = 10
alpha = .05
for (ee in 1:length(exp)){
#Load infant data
df = read.table(paste("Results/LiMA_Exp", ee,"_allModels_MSL.csv", sep=""),header = FALSE, sep=",")
colnames(df) = ModelCols
#Create coded score for different skeleton objects (e.g., a 0 cat accuracy is actually 100% correct)
df$OCS = df$tsAcc_ocs
df$OCS[df$Skel == 'Diff'] = 1-df$OCS[df$Skel == 'Diff']
df$ISOF = df$tsAcc_isof
df$ISOF[df$Skel == 'Diff'] = 1-df$ISOF[df$Skel == 'Diff']
#set up empty matrices for each condition (2) and classifier(2)  (the number of rows in matrix corresponds to the model)
bootMat.model = list(matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter))
#Start boot test
for (ii in 1:iter){
n = 1
for (cl in classifier){
for (mm in 1:length(ModelType)){
tempMAT = df[df$Model == ModelType[mm],]
#Sample with replacement
tempMAT = sample_n(tempMAT,nrow(tempMAT), replace = TRUE)
#Add to appropriate matrix
bootMat.model[[n]][mm,ii] = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
}
n= n +1
}
}
#Write to file
ModelSummary = matrix(0,length(bootMat.model)*length(ModelType),5)
ms = 1
n=1
for (cl in classifier){
for (mm in 1:length(ModelType)){
tempMAT = df[df$Model == ModelType[mm],]
tempMean = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
CI = quantile(bootMat.model[[ms]][mm,], probs = c(alpha/2, 1-alpha/2));
ModelSummary[n,] = c(ModelType[mm], cl, tempMean,CI[1],CI[2])
n= n + 1
}
ms = ms +1
}
colnames(ModelSummary) = c("Model", "Classifier", "Acc", "CI_Low", "CI_High")
assign(paste(exp[ee], '.Models_MSL', sep=""), ModelSummary)
}
save(Exp1.Models_MSL, Exp2.Models_MSL, file="Infant_Data/LiMA_Model_Data_MultiItem.RData")
View(df)
rm(list = ls())
library(ggplot2)
library(reshape2)
library(dplyr)
library(boot)
setwd('B:/home/vayzenbe/GitHub_Repos/LiMA')
exp = c('Exp1', 'Exp2')
ModelType= c('GBJ', 'GIST', 'FF_IN', 'R_IN', 'FF_SN', 'R_SN', 'CorNet_Z', 'CorNet_S','SayCam')
classifier = c("OCS", "ISOF")
ModelCols = c('Exp', 'Model', 'Obj1', 'Obj2', 'Skel', 'SF', 'trAcc_ocs', 'tsAcc_ocs','trAcc_isof', 'tsAcc_isof')
iter = 10000
alpha = .05
for (ee in 1:length(exp)){
#Load infant data
df = read.table(paste("Results/LiMA_Exp", ee,"_allModels_MSL.csv", sep=""),header = FALSE, sep=",")
colnames(df) = ModelCols
#Create coded score for different skeleton objects (e.g., a 0 cat accuracy is actually 100% correct)
df$OCS = df$tsAcc_ocs
df$OCS[df$Skel == 'Diff'] = 1-df$OCS[df$Skel == 'Diff']
df$ISOF = df$tsAcc_isof
df$ISOF[df$Skel == 'Diff'] = 1-df$ISOF[df$Skel == 'Diff']
#set up empty matrices for each condition (2) and classifier(2)  (the number of rows in matrix corresponds to the model)
bootMat.model = list(matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter))
#Start boot test
for (ii in 1:iter){
n = 1
for (cl in classifier){
for (mm in 1:length(ModelType)){
tempMAT = df[df$Model == ModelType[mm],]
#Sample with replacement
tempMAT = sample_n(tempMAT,nrow(tempMAT), replace = TRUE)
#Add to appropriate matrix
bootMat.model[[n]][mm,ii] = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
}
n= n +1
}
}
#Write to file
ModelSummary = matrix(0,length(bootMat.model)*length(ModelType),5)
ms = 1
n=1
for (cl in classifier){
for (mm in 1:length(ModelType)){
tempMAT = df[df$Model == ModelType[mm],]
tempMean = (mean(tempMAT[[cl]][tempMAT$Skel=="Same"], na.rm = TRUE) +
mean(tempMAT[[cl]][tempMAT$Skel=="Diff"], na.rm = TRUE))/2
CI = quantile(bootMat.model[[ms]][mm,], probs = c(alpha/2, 1-alpha/2));
ModelSummary[n,] = c(ModelType[mm], cl, tempMean,CI[1],CI[2])
n= n + 1
}
ms = ms +1
}
colnames(ModelSummary) = c("Model", "Classifier", "Acc", "CI_Low", "CI_High")
assign(paste(exp[ee], '.Models_MSL', sep=""), ModelSummary)
}
save(Exp1.Models_MSL, Exp2.Models_MSL, file="Infant_Data/LiMA_Model_Data_MultiItem.RData")
View(Exp1.Models_MSL)
View(Exp2.Models_MSL)
rm(list = ls())
library(ggplot2)
library(reshape2)
setwd('C:/Users/vayze/Desktop/GitHub_Repos/LiMA')
#load('Infant_Data/LiMA_Model_Data_Size.RData')
load('Infant_Data/LiMA_Model_Data.RData')
load('Infant_Data/LiMA_Model_Data_MultiItem.RData')
exp = c('Exp1', 'Exp2')
classifier = c("OCS", "ISOF")
ModelType= c('Infant', 'GBJ', 'GIST', 'FF_IN', 'R_IN', 'FF_SN', 'R_SN', 'CorNet_Z', 'CorNet_S','SayCam')
ActualName= c('Infants', 'GBJ', 'GIST',  'AlexNet-IN', 'ResNet-IN', 'AlexNet-SIN', 'ResNet-SIN', 'CorNet-Z', 'CorNet-S', 'SayCam')
for (mm in 1:length(ModelType)){
Exp1.Models[,1][Exp1.Models[,1] == ModelType[mm]] = ActualName[mm]
Exp2.Models[,1][Exp2.Models[,1] == ModelType[mm]] = ActualName[mm]
Exp1.Models_MSL[,1][Exp1.Models_MSL[,1] == ModelType[mm]] = ActualName[mm]
Exp2.Models_MSL[,1][Exp2.Models_MSL[,1] == ModelType[mm]] = ActualName[mm]
}
sLine = .7
sAx = 8
sTitle = 10
sPlot = 2.5
ModelCols = c('#39a055', '#8ccf8a', '#c81b1d', '#d84e3d', '#d84e3d', '#f09581', '#f9b6a6', '#ffd7cd')
for (ee in exp){
for (cl in classifier){
#Preprocess data to have factors and conditions etc.
df = as.data.frame(eval(as.name(paste(ee, '.Models', sep=""))))
df$Model = factor(df$Model, levels = c( 'Infants', 'GBJ', 'GIST',  'AlexNet-IN', 'ResNet-IN', 'AlexNet-SIN', 'ResNet-SIN', 'CorNet-Z', 'CorNet-S'))
df$Condition = factor(df$Condition, levels = c('SF','View', 'Skel'))
df$Acc = as.numeric(as.character(df$Acc))
df$CI_Low = as.numeric(as.character(df$CI_Low))
df$CI_High = as.numeric(as.character(df$CI_High))
#Make figure for different SF
df.SF = df[df$Condition == 'SF' & df$Classifier == cl | df$Classifier == "Infant",]
ggplot(df.SF, aes(x = Model, y= Acc, fill = Model)) + geom_col(color = "black", width = .5, size = sLine) + scale_fill_manual(values=c('#32759b', ModelCols)) +
geom_linerange(aes(ymin =df.SF$CI_Low, ymax=df.SF$CI_High, x = Model), size = sLine) +
scale_y_continuous(breaks = seq(0, 1, by = .25), limits=c(0,1), expand = c(0,0)) + geom_hline(yintercept= .5, linetype="dashed", size = sLine) +
xlab("Models") + ylab("Categorization Score") + theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
axis.text.x = element_text(size=sAx, color = "black",angle =45,hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_text(size=sTitle),
axis.line = element_line(size = sLine),
axis.ticks= element_line(size = sLine, color = 'black'),
axis.ticks.length = unit(.09, "cm"),
legend.position ="none")
ggsave(filename =  paste('Infant_Data/Figures/', ee, '_', cl,'_SF.png', sep = ""), plot = last_plot(), dpi = 300,width =3, height = 3)
#reliability 'view' Figure
df.view = df[df$Condition == 'View' & df$Classifier == cl,]
ggplot(df.view, aes(x = Model, y= Acc, fill = Model)) + geom_col(color = "black", width = .5, size = sLine) + scale_fill_manual(values=ModelCols) +
geom_linerange(aes(ymin =df.view$CI_Low, ymax=df.view$CI_High, x = Model), size = sLine) +
scale_y_continuous(breaks = seq(0, 1, by = .25), limits=c(0,1), expand = c(0,0)) + geom_hline(yintercept= .5, linetype="dashed", size = sLine) +
xlab("Models") + ylab("Categorization Score") + theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
axis.text.x = element_text(size=sAx, color = "black",angle =45,hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_text(size=sTitle),
axis.line = element_line(size = sLine),
axis.ticks= element_line(size = sLine, color = 'black'),
axis.ticks.length = unit(.09, "cm"),
legend.position ="none")
ggsave(filename =  paste('Infant_Data/Figures/', ee, '_', cl,'_view.png', sep = ""), plot = last_plot(), dpi = 300,width =3, height = 3)
#reliability 'view' Figure
df.skel = df[df$Condition == 'Skel' & df$Classifier == cl,]
ggplot(df.skel, aes(x = Model, y= Acc, fill = Model)) + geom_col(color = "black", width = .5, size = sLine) + scale_fill_manual(values=ModelCols) +
geom_linerange(aes(ymin =df.skel$CI_Low, ymax=df.skel$CI_High, x = Model), size = sLine) +
scale_y_continuous(breaks = seq(0, 1, by = .25), limits=c(0,1), expand = c(0,0)) + geom_hline(yintercept= .5, linetype="dashed", size = sLine) +
xlab("Models") + ylab("Categorization Score") + theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
axis.text.x = element_text(size=sAx, color = "black",angle =45,hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_text(size=sTitle),
axis.line = element_line(size = sLine),
axis.ticks= element_line(size = sLine, color = 'black'),
axis.ticks.length = unit(.09, "cm"),
legend.position ="none")
ggsave(filename =  paste('Infant_Data/Figures/', ee, '_', cl,'_Skel.png', sep = ""), plot = last_plot(), dpi = 300,width =3, height = 3)
#SF one-class learning figure
#Multi-class learning figure
df = as.data.frame(eval(as.name(paste(ee, '.Models_MSL', sep=""))))
df = df[df$Classifier == cl,]
df$Model = factor(df$Model, levels = c( 'GBJ', 'GIST', 'AlexNet-IN', 'ResNet-IN', 'AlexNet-SIN', 'ResNet-SIN', 'CorNet-Z', 'CorNet-S'))
df$Acc = as.numeric(as.character(df$Acc))
df$CI_Low = as.numeric(as.character(df$CI_Low))
df$CI_High = as.numeric(as.character(df$CI_High))
ggplot(df, aes(x = Model, y= Acc, fill = Model)) + geom_col(color = "black", width = .5, size = sLine) + scale_fill_manual(values=ModelCols) +
geom_linerange(aes(ymin =df$CI_Low, ymax=df$CI_High, x = Model), size = sLine) +
scale_y_continuous(breaks = seq(0, 1, by = .25), limits=c(0,1), expand = c(0,0)) + geom_hline(yintercept= .5, linetype="dashed", size = sLine) +
xlab("Models") + ylab("Categorization Score") + theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
axis.text.x = element_text(size=sAx, color = "black",angle =45,hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_text(size=sTitle),
axis.line = element_line(size = sLine),
axis.ticks= element_line(size = sLine, color = 'black'),
axis.ticks.length = unit(.09, "cm"),
legend.position ="none")
ggsave(filename =  paste('Infant_Data/Figures/', ee, '_', cl,'_MSL.png', sep = ""), plot = last_plot(), dpi = 300,width =3, height = 3)
}
}
rm(list = ls())
library(ggplot2)
library(reshape2)
setwd('B:/home/vayzenbe/GitHub_Repos/LiMA')
#load('Infant_Data/LiMA_Model_Data_Size.RData')
load('Infant_Data/LiMA_Model_Data.RData')
load('Infant_Data/LiMA_Model_Data_MultiItem.RData')
exp = c('Exp1', 'Exp2')
classifier = c("OCS", "ISOF")
ModelType= c('Infant', 'GBJ', 'GIST', 'FF_IN', 'R_IN', 'FF_SN', 'R_SN', 'CorNet_Z', 'CorNet_S','SayCam')
ActualName= c('Infants', 'GBJ', 'GIST',  'AlexNet-IN', 'ResNet-IN', 'AlexNet-SIN', 'ResNet-SIN', 'CorNet-Z', 'CorNet-S', 'SayCam')
for (mm in 1:length(ModelType)){
Exp1.Models[,1][Exp1.Models[,1] == ModelType[mm]] = ActualName[mm]
Exp2.Models[,1][Exp2.Models[,1] == ModelType[mm]] = ActualName[mm]
Exp1.Models_MSL[,1][Exp1.Models_MSL[,1] == ModelType[mm]] = ActualName[mm]
Exp2.Models_MSL[,1][Exp2.Models_MSL[,1] == ModelType[mm]] = ActualName[mm]
}
sLine = .7
sAx = 8
sTitle = 10
sPlot = 2.5
ModelCols = c('#39a055', '#8ccf8a', '#c81b1d', '#d84e3d', '#d84e3d', '#f09581', '#f9b6a6', '#ffd7cd')
for (ee in exp){
for (cl in classifier){
#Preprocess data to have factors and conditions etc.
df = as.data.frame(eval(as.name(paste(ee, '.Models', sep=""))))
df$Model = factor(df$Model, levels = c( 'Infants', 'GBJ', 'GIST',  'AlexNet-IN', 'ResNet-IN', 'AlexNet-SIN', 'ResNet-SIN', 'CorNet-Z', 'CorNet-S'))
df$Condition = factor(df$Condition, levels = c('SF','View', 'Skel'))
df$Acc = as.numeric(as.character(df$Acc))
df$CI_Low = as.numeric(as.character(df$CI_Low))
df$CI_High = as.numeric(as.character(df$CI_High))
#Make figure for different SF
df.SF = df[df$Condition == 'SF' & df$Classifier == cl | df$Classifier == "Infant",]
ggplot(df.SF, aes(x = Model, y= Acc, fill = Model)) + geom_col(color = "black", width = .5, size = sLine) + scale_fill_manual(values=c('#32759b', ModelCols)) +
geom_linerange(aes(ymin =df.SF$CI_Low, ymax=df.SF$CI_High, x = Model), size = sLine) +
scale_y_continuous(breaks = seq(0, 1, by = .25), limits=c(0,1), expand = c(0,0)) + geom_hline(yintercept= .5, linetype="dashed", size = sLine) +
xlab("Models") + ylab("Categorization Score") + theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
axis.text.x = element_text(size=sAx, color = "black",angle =45,hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_text(size=sTitle),
axis.line = element_line(size = sLine),
axis.ticks= element_line(size = sLine, color = 'black'),
axis.ticks.length = unit(.09, "cm"),
legend.position ="none")
ggsave(filename =  paste('Infant_Data/Figures/', ee, '_', cl,'_SF.png', sep = ""), plot = last_plot(), dpi = 300,width =3, height = 3)
#reliability 'view' Figure
df.view = df[df$Condition == 'View' & df$Classifier == cl,]
ggplot(df.view, aes(x = Model, y= Acc, fill = Model)) + geom_col(color = "black", width = .5, size = sLine) + scale_fill_manual(values=ModelCols) +
geom_linerange(aes(ymin =df.view$CI_Low, ymax=df.view$CI_High, x = Model), size = sLine) +
scale_y_continuous(breaks = seq(0, 1, by = .25), limits=c(0,1), expand = c(0,0)) + geom_hline(yintercept= .5, linetype="dashed", size = sLine) +
xlab("Models") + ylab("Categorization Score") + theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
axis.text.x = element_text(size=sAx, color = "black",angle =45,hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_text(size=sTitle),
axis.line = element_line(size = sLine),
axis.ticks= element_line(size = sLine, color = 'black'),
axis.ticks.length = unit(.09, "cm"),
legend.position ="none")
ggsave(filename =  paste('Infant_Data/Figures/', ee, '_', cl,'_view.png', sep = ""), plot = last_plot(), dpi = 300,width =3, height = 3)
#reliability 'view' Figure
df.skel = df[df$Condition == 'Skel' & df$Classifier == cl,]
ggplot(df.skel, aes(x = Model, y= Acc, fill = Model)) + geom_col(color = "black", width = .5, size = sLine) + scale_fill_manual(values=ModelCols) +
geom_linerange(aes(ymin =df.skel$CI_Low, ymax=df.skel$CI_High, x = Model), size = sLine) +
scale_y_continuous(breaks = seq(0, 1, by = .25), limits=c(0,1), expand = c(0,0)) + geom_hline(yintercept= .5, linetype="dashed", size = sLine) +
xlab("Models") + ylab("Categorization Score") + theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
axis.text.x = element_text(size=sAx, color = "black",angle =45,hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_text(size=sTitle),
axis.line = element_line(size = sLine),
axis.ticks= element_line(size = sLine, color = 'black'),
axis.ticks.length = unit(.09, "cm"),
legend.position ="none")
ggsave(filename =  paste('Infant_Data/Figures/', ee, '_', cl,'_Skel.png', sep = ""), plot = last_plot(), dpi = 300,width =3, height = 3)
#SF one-class learning figure
#Multi-class learning figure
df = as.data.frame(eval(as.name(paste(ee, '.Models_MSL', sep=""))))
df = df[df$Classifier == cl,]
df$Model = factor(df$Model, levels = c( 'GBJ', 'GIST', 'AlexNet-IN', 'ResNet-IN', 'AlexNet-SIN', 'ResNet-SIN', 'CorNet-Z', 'CorNet-S'))
df$Acc = as.numeric(as.character(df$Acc))
df$CI_Low = as.numeric(as.character(df$CI_Low))
df$CI_High = as.numeric(as.character(df$CI_High))
ggplot(df, aes(x = Model, y= Acc, fill = Model)) + geom_col(color = "black", width = .5, size = sLine) + scale_fill_manual(values=ModelCols) +
geom_linerange(aes(ymin =df$CI_Low, ymax=df$CI_High, x = Model), size = sLine) +
scale_y_continuous(breaks = seq(0, 1, by = .25), limits=c(0,1), expand = c(0,0)) + geom_hline(yintercept= .5, linetype="dashed", size = sLine) +
xlab("Models") + ylab("Categorization Score") + theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
axis.text.x = element_text(size=sAx, color = "black",angle =45,hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_text(size=sTitle),
axis.line = element_line(size = sLine),
axis.ticks= element_line(size = sLine, color = 'black'),
axis.ticks.length = unit(.09, "cm"),
legend.position ="none")
ggsave(filename =  paste('Infant_Data/Figures/', ee, '_', cl,'_MSL.png', sep = ""), plot = last_plot(), dpi = 300,width =3, height = 3)
}
}
