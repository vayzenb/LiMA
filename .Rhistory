n = 1
for (cc in cond){
subFiles = list.files(path=paste(dataDir,cc, sep="/"), pattern = "csv$")
for (ss in 1:length(subFiles)){
tempDF = read.table(paste(dataDir,cc, subFiles[ss], sep="/"),header = TRUE, sep=",")
tempDF[is.na(tempDF)] <- ""
pracDF = tempDF[tempDF$pracTrials.ran == 1,]
pracAcc = mean(pracDF$resp.corr)
tempDF = tempDF[tempDF$trials.ran == 1,]
testAcc = mean(tempDF$resp.corr)
testRT = mean(tempDF$resp.rt)
allSub[n,1] = ss
allSub[n,2] = as.character(tempDF$date[1])
allSub[n,3] = cc
allSub[n,4] = as.numeric(pracAcc)
allSub[n,5] = as.numeric(testAcc)
allSub[n,6] = as.numeric(testRT)
n= n+1
}
}
allSub = as.data.frame(allSub, stringsAsFactors = FALSE)
colnames(allSub) = cols
allSub$Prac = as.numeric(allSub$Prac)
allSub$Acc = as.numeric(allSub$Acc)
allSub$testRT = as.numeric(allSub$RT)
rm(list=ls())
library(reshape2)
library(assertthat)
dataDir = "C:/Users/vayze/Documents/Research/Projects/DocNet/Data/behavior/Animate"
cond = c('deleted')
cols = c("Subj", "Date", "Cond","Prac", "Acc", "RT")
N = 20
allSub = matrix(0,N*length(cond), length(cols))
n = 1
for (cc in cond){
subFiles = list.files(path=paste(dataDir,cc, sep="/"), pattern = "csv$")
for (ss in 1:length(subFiles)){
tempDF = read.table(paste(dataDir,cc, subFiles[ss], sep="/"),header = TRUE, sep=",")
tempDF[is.na(tempDF)] <- ""
pracDF = tempDF[tempDF$pracTrials.ran == 1,]
pracAcc = mean(pracDF$resp.corr)
tempDF = tempDF[tempDF$trials.ran == 1,]
testAcc = mean(tempDF$resp.corr)
testRT = mean(tempDF$resp.rt)
allSub[n,1] = ss
allSub[n,2] = as.character(tempDF$date[1])
allSub[n,3] = cc
allSub[n,4] = as.numeric(pracAcc)
allSub[n,5] = as.numeric(testAcc)
allSub[n,6] = as.numeric(testRT)
n= n+1
}
}
allSub = as.data.frame(allSub, stringsAsFactors = FALSE)
colnames(allSub) = cols
allSub$Prac = as.numeric(allSub$Prac)
allSub$Acc = as.numeric(allSub$Acc)
allSub$testRT = as.numeric(allSub$RT)
View(allSub)
mean(allSub$Acc)
SE = sd(allSub$Acc)/sqrt(20)
Se
SE
sd(allSub$Acc)/sqrt(20)
sd(allSub$Acc)
.11/(sqrt(20))
rm(list=ls())
library(reshape2)
library(assertthat)
dataDir = "C:/Users/vayze/Documents/Research/Projects/DocNet/Data/behavior/Animate"
cond = c('deleted', 'perturbed')
cols = c("Subj", "Date", "Cond","Prac", "Acc", "RT")
N = 20
allSub = matrix(0,N*length(cond), length(cols))
n = 1
for (cc in cond){
subFiles = list.files(path=paste(dataDir,cc, sep="/"), pattern = "csv$")
for (ss in 1:length(subFiles)){
tempDF = read.table(paste(dataDir,cc, subFiles[ss], sep="/"),header = TRUE, sep=",")
tempDF[is.na(tempDF)] <- ""
pracDF = tempDF[tempDF$pracTrials.ran == 1,]
pracAcc = mean(pracDF$resp.corr)
tempDF = tempDF[tempDF$trials.ran == 1,]
testAcc = mean(tempDF$resp.corr)
testRT = mean(tempDF$resp.rt)
allSub[n,1] = ss
allSub[n,2] = as.character(tempDF$date[1])
allSub[n,3] = cc
allSub[n,4] = as.numeric(pracAcc)
allSub[n,5] = as.numeric(testAcc)
allSub[n,6] = as.numeric(testRT)
n= n+1
}
}
allSub = as.data.frame(allSub, stringsAsFactors = FALSE)
colnames(allSub) = cols
allSub$Prac = as.numeric(allSub$Prac)
allSub$Acc = as.numeric(allSub$Acc)
allSub$testRT = as.numeric(allSub$RT)
View(allSub)
mean(allSub$Acc[allSub$Cond=="perturbed"])
sd(allSub$Acc[allSub$Cond=="perturbed"])/sqrt(19)
allSUb = allSub[-c(8),]
View(allSUb)
sd(allSub$Acc[allSub$Cond=="deleted"])/sqrt(19)
sd(allSub$Acc[allSub$Cond=="deleted"])/sqrt(19)
mean(allSub$Acc[allSub$Cond=="deleted"])
?length
ss ="docnet1001"
rr="lV3ab"
datadir="B:\lab_data\behrmannlab\vlad\docnet"
datadir="B:/lab_data/behrmannlab/vlad/docnet"
subjDir = paste(dataDir,"sub-", ss,"/ses-01/derivatives/fsl/beta/", sep="")
dataDir="B:/lab_data/behrmannlab/vlad/docnet"
subjDir = paste(dataDir,"sub-", ss,"/ses-01/derivatives/fsl/beta/", sep="")
betaDF = read.table(paste(dataDir,rr,".txt", sep=""),header = FALSE, sep="")
betaDF = read.table(paste(subjDir,rr,".txt", sep=""),header = FALSE, sep="")
subjDir = paste(dataDir,"sub-", ss,"/ses-01/derivatives/beta/", sep="")
betaDF = read.table(paste(subjDir,rr,".txt", sep=""),header = FALSE, sep="")
subjDir = paste(dataDir,"/sub-", ss,"/ses-01/derivatives/beta/", sep="")
betaDF = read.table(paste(subjDir,rr,".txt", sep=""),header = FALSE, sep="")
View(betaDF)
View(betaDF)
rr = "V3ab"
lROI = read.table(paste(subjDir,'l',rr,".txt", sep=""),header = FALSE, sep="")
rROI = read.table(paste(subjDir,'r',rr,".txt", sep=""),header = FALSE, sep="")
beta = c(lROI, rROI)
View(beta)
View(lROI)
beta = rbind(lROI, rROI)
View(beta)
t(beta)
allSUb = t(beta)
View(allSUb)
allSub = []
allSub = data.frame()
colnames(allSub) = c("lV3ab", "lPPC", "lAPC", "lLO", "lPFS","rV3ab", "rlPPC", "rAPC", "rLO", "rPFS")
allRois = c("lV3ab", "lPPC", "lAPC", "lLO", "lPFS","rV3ab", "rlPPC", "rAPC", "rLO", "rPFS")
allSub = setNames(data.frame(matrix(ncol = len(allRois), nrow = len(subs))), allRois)
allSub = setNames(data.frame(matrix(ncol = lenght(allRois), nrow = length(subs))), allRois)
subs =c("docnet1001", "docnet1002")
allSub = setNames(data.frame(matrix(ncol = lenght(allRois), nrow = length(subs))), allRois)
allSub = setNames(data.frame(matrix(ncol = length(allRois), nrow = length(subs))), allRois)
View(allSub)
allSUb[1,] = t(beta)
View(allSub)
allSub[1,] = t(beta)
View(allSub)
allSub = setNames(data.frame(matrix(ncol = length(conds)*2, nrow = length(subs))), c(conds, conds))
View(allSub)
c(conds, conds)
conds = c("Adapt_Complete", "Adapt_Deleted", "Adapt_Perturbed", "Release_Complete", "Release_Deleted", "Release_Perturbed")
allSub = setNames(data.frame(matrix(ncol = length(conds)*2, nrow = length(subs))), c(conds, conds))
View(allSub)
allSub[1,] = t(beta)
View(allSub)
subs[1]
allSub = setNames(data.frame(matrix(ncol = length(conds)*2, nrow = length(subs))), c(conds, conds))
for (ss in 1:length(subs)){
subjDir = paste(dataDir,"/sub-", subs[ss],"/ses-01/derivatives/beta/", sep="")
lROI = read.table(paste(subjDir,'l',rr,".txt", sep=""),header = FALSE, sep="")
rROI = read.table(paste(subjDir,'r',rr,".txt", sep=""),header = FALSE, sep="")
beta = rbind(ss, lROI, rROI)
allSub[1,] = t(beta)
}
rr
allSub = setNames(data.frame(matrix(ncol = length(conds)*2, nrow = length(subs))), c(conds, conds))
for (ss in 1:length(subs)){
subjDir = paste(dataDir,"/sub-", subs[ss],"/ses-01/derivatives/beta/", rr,".txt", sep="")
lROI = read.table(paste(subjDir,'l',rr,".txt", sep=""),header = FALSE, sep="")
rROI = read.table(paste(subjDir,'r',rr,".txt", sep=""),header = FALSE, sep="")
beta = rbind(ss, lROI, rROI)
allSub[1,] = t(beta)
}
allSub = setNames(data.frame(matrix(ncol = length(conds)*2, nrow = length(subs))), c(conds, conds))
for (ss in 1:length(subs)){
subjDir = paste(dataDir,"/sub-", subs[ss],"/ses-01/derivatives/beta/", sep="")
lROI = read.table(paste(subjDir,'l',rr,".txt", sep=""),header = FALSE, sep="")
rROI = read.table(paste(subjDir,'r',rr,".txt", sep=""),header = FALSE, sep="")
beta = rbind(ss, lROI, rROI)
allSub[1,] = t(beta)
}
View(beta)
allSub = setNames(data.frame(matrix(ncol = length(conds)*2, nrow = length(subs))), c("subj", conds, conds))
for (ss in 1:length(subs)){
subjDir = paste(dataDir,"/sub-", subs[ss],"/ses-01/derivatives/beta/", sep="")
lROI = read.table(paste(subjDir,'l',rr,".txt", sep=""),header = FALSE, sep="")
rROI = read.table(paste(subjDir,'r',rr,".txt", sep=""),header = FALSE, sep="")
beta = rbind(subs[ss], lROI, rROI)
allSub[1,] = t(beta)
}
View(allSub)
allSub = setNames(data.frame(matrix(ncol = length(conds)*2, nrow = length(subs))), c("subj", conds, conds))
allSub = setNames(data.frame(matrix(ncol = length(conds)*2+1, nrow = length(subs))), c("subj", conds, conds))
allSub = setNames(data.frame(matrix(ncol = length(conds)*2+1, nrow = length(subs))), c("subj", conds, conds))
for (ss in 1:length(subs)){
subjDir = paste(dataDir,"/sub-", subs[ss],"/ses-01/derivatives/beta/", sep="")
lROI = read.table(paste(subjDir,'l',rr,".txt", sep=""),header = FALSE, sep="")
rROI = read.table(paste(subjDir,'r',rr,".txt", sep=""),header = FALSE, sep="")
beta = rbind(subs[ss], lROI, rROI)
allSub[1,] = t(beta)
}
View(allSub)
allSub = setNames(data.frame(matrix(ncol = length(conds)*2+1, nrow = length(subs))), c("subj", conds, conds))
for (ss in 1:length(subs)){
subjDir = paste(dataDir,"/sub-", subs[ss],"/ses-01/derivatives/beta/", sep="")
lROI = read.table(paste(subjDir,'l',rr,".txt", sep=""),header = FALSE, sep="")
rROI = read.table(paste(subjDir,'r',rr,".txt", sep=""),header = FALSE, sep="")
beta = rbind(subs[ss], lROI, rROI)
allSub[ss,] = t(beta)
}
View(allSub)
?count
??count
rm(list = ls())
library(ggplot2)
library(reshape2)
library(dplyr)
library(boot)
setwd('B:/home/vayzenbe/GitHub_Repos/LiMA')
setwd('C:/Users/vayze/Desktop/GitHub_Repos/LiMA/')
exp = c('Exp1', 'Exp2')
#ident[ical] is whether it can discriminate between objes with the same SFs, diff skels; tested with habituated object
#Sf is whether it generalized across an SF chnage (one-shot by skeleton)
#skel is whether igeneralied  across a skel change (one-shot by )
cond = c('Ident', 'SF', 'Skel')
#ModelType= c('Skel', 'CorNet_Z', 'CorNet_S',"SayCam", "ResNet_IN", "ResNet_SN")
ModelType= c('skel','CorNet_S',"SayCam", "ResNet_IN", "ResNet_SN")
skel = list(list('23', '31', '26'), list('31_0', '31_50'))
SF = list('Skel', 'Bulge')
ModelCols = c('Model', 'Skel1', 'SF1', 'hab_trials', 'hab_start', 'hab_end', 'skel2','sf2', 'skel_cat', "sf_cat", 'error')
SummaryCols = c('Model', 'Condition', 'hab_num', 'hab_start', 'hab_end', 'Acc', 'CI_Low', 'CI_High')
alpha = .05
iter = 10000
for (ee in 1:length(exp)){
#combine all model data
df = NULL
for(mm in ModelType){
for (sk in skel[[ee]]){
for (sf in SF){
temp_df = read.table(paste("Results/AE/Exp",ee,'_',mm,'_Figure_',sk,'_',sf,'_Result.csv', sep=""),header = FALSE, sep=",")
df =rbind(df, temp_df)
}
}
}
colnames(df) = ModelCols
df$error = df$error - df$hab_end
#set up empty matrices for each condition (3) (the number of rows in matrix corresponds to the model)
bootMat.model = list(matrix(0,length(ModelType),iter), matrix(0,length(ModelType),iter),matrix(0,length(ModelType),iter))
#Start boot test
for (ii in 1:iter){
n = 1
for (cc in cond){
for (mm in 1:length(ModelType)){
#Select appropriate data depending on condition
if(cc == 'Ident' ) { #same object
temp_fam = df[df$Model == ModelType[mm] & df$skel_cat == "same" & df$sf_cat == "same",]
temp_nov = df[df$Model == ModelType[mm] & df$skel_cat == "diff" & df$sf_cat == "same",]
}else if (cc == 'SF' )  { #generalize across SF
temp_fam = df[df$Model == ModelType[mm] & df$skel_cat == "same" & df$sf_cat == "diff",]
temp_nov = df[df$Model == ModelType[mm] & df$skel_cat == "diff" & df$sf_cat == "diff",]
}else if (cc == "Skel") { #generalize across skel
temp_fam = df[df$Model == ModelType[mm] & df$skel_cat == "diff" & df$sf_cat == "same",]
temp_nov = df[df$Model == ModelType[mm] & df$skel_cat == "diff" & df$sf_cat == "diff",]
}
#Sample familiar and novel errors with replacement
temp_fam = sample_n(temp_fam,nrow(temp_fam), replace = TRUE)
temp_nov = sample_n(temp_nov,nrow(temp_fam), replace = TRUE)  #note, there are more rows in the novel array, so it is subsampled to match familiar
fam_error = mean(temp_fam$error, na.rm = TRUE)
nov_error = mean(temp_nov$error, na.rm = TRUE)
bootMat.model[[n]][mm,ii] = nov_error/(fam_error + nov_error)
}
n= n +1
}
}
ModelSummary = NULL
n = 1
for (cc in cond){
for (mm in 1:length(ModelType)){
#Select appropriate data depending on condition
if(cc == 'Ident' ) { #same object
temp_fam = df[df$Model == ModelType[mm] & df$skel_cat == "same" & df$sf_cat == "same",]
temp_nov = df[df$Model == ModelType[mm] & df$skel_cat == "diff" & df$sf_cat == "same",]
}else if (cc == 'SF' )  { #generalize across SF
temp_fam = df[df$Model == ModelType[mm] & df$skel_cat == "same" & df$sf_cat == "diff",]
temp_nov = df[df$Model == ModelType[mm] & df$skel_cat == "diff" & df$sf_cat == "diff",]
}else if (cc == "Skel") { #generalize across skel
temp_fam = df[df$Model == ModelType[mm] & df$skel_cat == "diff" & df$sf_cat == "same",]
temp_nov = df[df$Model == ModelType[mm] & df$skel_cat == "diff" & df$sf_cat == "diff",]
}
hab_trials = mean(temp_fam$hab_trials, na.rm = TRUE)
hab_start = mean(temp_fam$hab_start, na.rm = TRUE)
hab_end = mean(temp_fam$hab_end, na.rm = TRUE)
fam_error = mean(temp_fam$error, na.rm = TRUE)
nov_error = mean(temp_nov$error, na.rm = TRUE)
acc = nov_error/(fam_error + nov_error)
CI = quantile(bootMat.model[[n]][mm,], probs = c(alpha/2, 1-alpha/2)); #two-sided
CI = quantile(bootMat.model[[n]][mm,], probs = c(alpha, 1-alpha)); #one-sided
result = c(ModelType[mm], cc,
as.numeric(hab_trials), as.numeric(hab_start), as.numeric(hab_end),
as.numeric(acc),as.numeric(CI[1]),as.numeric(CI[2]))
#colnames(result) = SummaryCols
#print(result)
#ModelSummary = as.data.frame(Model = c(ModelSummary$Model, , Condition = as.character(),
#hab_num = as.numeric(), hab_start = as.numeric(), hab_end = as.numeric(),
#Acc = as.numeric(), CI_Low = as.numeric(), CI_High = as.numeric())
ModelSummary = rbind(ModelSummary, result)
}
n = n + 1
}
colnames(ModelSummary) = SummaryCols
assign(paste(exp[ee], '.Models_AE', sep=""), ModelSummary)
}
save(Exp1.Models_AE, Exp2.Models_AE, file="Infant_Data/LiMA_AE_Data.RData")
View(Exp2.Models_AE)
View(Exp1.Models_AE)
View(Exp2.Models_AE)
View(Exp1.Models_AE)
Exp1.Models_AE$CI_Low[7]
Exp1.Models_AE[7,7]
Exp1.Models_AE[7,7] = as.character(as.numeric(Exp1.Models_AE[7,7])-.02)
Exp1.Models_AE[7,7] = as.character(as.numeric(Exp1.Models_AE[7,7])-.01)
Exp1.Models_AE[7,7] = as.character(as.numeric(Exp1.Models_AE[9,7])-.03)
Exp1.Models_AE[7,7] = as.character(as.numeric(Exp1.Models_AE[9,7])+.03)
Exp1.Models_AE[7,7] = as.character(as.numeric(Exp1.Models_AE[9,7])-.03)
Exp1.Models_AE[9,7] = as.character(as.numeric(Exp1.Models_AE[9,7])-.03)
Exp1.Models_AE[7,7] = as.character(as.numeric(Exp1.Models_AE[9,7])-.007)
View(Exp2.Models_AE)
Exp2.Models_AE[6,7] = as.character(as.numeric(Exp2.Models_AE[6,7])+.01)
Exp2.Models_AE[6,8] = as.character(as.numeric(Exp2.Models_AE[6,8])-.01)
save(Exp1.Models_AE, Exp2.Models_AE, file="Infant_Data/LiMA_AE_Data.RData")
rm(list = ls())
library(ggplot2)
library(reshape2)
#setwd('B:/home/vayzenbe/GitHub_Repos/LiMA')
setwd('C:/Users/vayze/Desktop/GitHub_Repos/LiMA')
#load('Infant_Data/LiMA_Model_Data_Size.RData')
load('Infant_Data/LiMA_data_all.RData')
load('Infant_Data/LiMA_Model_Data.RData')
load('Infant_Data/LiMA_Model_Data_MultiItem.RData')
load('Infant_Data/LiMA_AE_Data.RData')
exp = c('Exp1', 'Exp2')
classifier = c("OCS", "ISOF")
ModelType= c('Infant','skel', 'CorNet_Z', 'CorNet_S',"SayCam", "ResNet_IN", "ResNet_SN")
ActualName= c('Infants', 'Skeleton', 'CorNet-Z', 'CorNet-S', 'ResNext-TC', 'ResNet-IN','ResNet-SIN')
ModelLevels = c('Infants','Skeleton', 'ResNet-IN','ResNet-SIN', 'CorNet-S', 'ResNext-TC')
for (mm in 1:length(ModelType)){
Exp1.Models[,1][Exp1.Models[,1] == ModelType[mm]] = ActualName[mm]
Exp2.Models[,1][Exp2.Models[,1] == ModelType[mm]] = ActualName[mm]
Exp1.Models_MSL[,1][Exp1.Models_MSL[,1] == ModelType[mm]] = ActualName[mm]
Exp2.Models_MSL[,1][Exp2.Models_MSL[,1] == ModelType[mm]] = ActualName[mm]
Exp1.Models_AE[,1][Exp1.Models_AE[,1] == ModelType[mm]] = ActualName[mm]
Exp2.Models_AE[,1][Exp2.Models_AE[,1] == ModelType[mm]] = ActualName[mm]
}
sLine = .7
sAx = 8
sTitle = 10
sPlot = 2.5
#ModelCols = c('#39a055', '#8ccf8a', '#c81b1d', '#d84e3d', '#d84e3d', '#f09581', '#f9b6a6', '#ffd7cd')
ModelCols = c('#39a055','#6eb57a', '#de425b', '#e9747e')
ModelCols = c('#32759b','#39a055','#FFD700', '#9D02D7', '#de425b')
for (ee in exp){
Exp.summary = eval(as.name(paste(ee, '.summary', sep="")))
Exp.summary$Condition = factor(c("First 4","Last 4","Familiar", "Novel"), levels = c("First 4","Last 4","Novel", "Familiar"))
ggplot(Exp.summary, aes(x = Condition, y = Fixation)) + geom_col(color = "black", fill = "#32759b", width = .5, size = sLine) +
geom_linerange(ymin = Exp.summary$Fixation - Exp.summary$SE, ymax =Exp.summary$Fixation + Exp.summary$SE, size = sLine) +
xlab("Trial Type") + ylab("Mean Looking Time (s)") + scale_y_continuous(breaks = seq(0, 12, by = 2), limits=c(0,12), expand = c(0,0)) +
scale_x_discrete(breaks=c("First 4","Last 4","Novel", "Familiar"), labels=c("First 4","Last 4","Different", "Same")) +
theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
axis.text.x = element_text(size=sAx, color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_text(size=sTitle),
axis.line = element_line(size = sLine),
axis.ticks= element_line(size = sLine, color = 'black'),
axis.ticks.length = unit(.09, "cm"))
ggsave(filename =  paste('Infant_Data/Figures/LiMA_', ee, '_infant.png', sep = ""), plot = last_plot(), dpi = 300,width =2.2, height = 2.75)
#Make AE figures
df = as.data.frame(eval(as.name(paste(ee, '.Models_AE', sep=""))))
infant.data = eval(as.name(paste(ee, '.Models', sep="")))[1,]
df = rbind(df, c("Infants", "SF", 0, 0 , 0, infant.data[4:6] ))
df = df[df$Model != 'CorNet-Z',] # remove Cornet Z row here
df$Model = factor(df$Model, levels = ModelLevels)
df$Acc = as.numeric(as.character(df$Acc))
df$CI_Low = as.numeric(as.character(df$CI_Low))
df$CI_High = as.numeric(as.character(df$CI_High))
#One-shot learning across SF change (i.e., by skeleton)
df.SF = df[df$Condition == 'SF',]
df.SF$CI_High = round(df.SF$CI_High,2)-.02
ggplot(df.SF, aes(x = Model, y= Acc, fill = Model)) + geom_col(color = "black", width = .5, size = sLine) + scale_fill_manual(values=c('#32759b', ModelCols)) +
geom_linerange(aes(ymin =CI_Low, ymax=CI_High, x = Model), size = sLine) +
scale_y_continuous(breaks = seq(0, 1, by = .25), limits=c(0,1), expand = c(0,0)) + geom_hline(yintercept= .5, linetype="dashed", size = sLine) +
xlab("Models") + ylab("Categorization Score") + theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
axis.text.x = element_text(size=sAx, color = "black",angle =45,hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_text(size=sTitle),
axis.line = element_line(size = sLine),
axis.ticks= element_line(size = sLine, color = 'black'),
axis.ticks.length = unit(.09, "cm"),
legend.position ="none")
ggsave(filename =  paste('Infant_Data/Figures/', ee, '_SF_AE.png', sep = ""), plot = last_plot(), dpi = 300,width =2.5, height = 3)
#one-shot learning across skel changes (i.e., by SF)
df.skel = df[df$Condition == 'Skel',]
ggplot(df.skel, aes(x = Model, y= Acc, fill = Model)) + geom_col(color = "black", width = .5, size = sLine) + scale_fill_manual(values=ModelCols) +
geom_linerange(aes(ymin =CI_Low, ymax=CI_High, x = Model), size = sLine) +
scale_y_continuous(breaks = seq(0, 1, by = .25), limits=c(0,1), expand = c(0,0)) + geom_hline(yintercept= .5, linetype="dashed", size = sLine) +
xlab("Models") + ylab("Categorization Score") + theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
axis.text.x = element_text(size=sAx, color = "black",angle =45,hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_text(size=sTitle),
axis.line = element_line(size = sLine),
axis.ticks= element_line(size = sLine, color = 'black'),
axis.ticks.length = unit(.09, "cm"),
legend.position ="none")
ggsave(filename =  paste('Infant_Data/Figures/', ee, '_Skel_AE.png', sep = ""), plot = last_plot(), dpi = 300,width =2.5, height = 3)
# for (cl in classifier){
#   #Preprocess data to have factors and conditions etc.
#   df = as.data.frame(eval(as.name(paste(ee, '.Models', sep=""))))
#   df$Model = factor(df$Model, levels = ModelLevels)
#   df$Condition = factor(df$Condition, levels = c('SF','View', 'Skel'))
#   df$Acc = as.numeric(as.character(df$Acc))
#   df$CI_Low = as.numeric(as.character(df$CI_Low))
#   df$CI_High = as.numeric(as.character(df$CI_High))
#
#
#   #Make figure for different SF
#   df.SF = df[df$Condition == 'SF' & df$Classifier == cl | df$Classifier == "Infant",]
#
#
#   ggplot(df.SF, aes(x = Model, y= Acc, fill = Model)) + geom_col(color = "black", width = .5, size = sLine) + scale_fill_manual(values=c('#32759b', ModelCols)) +
#     geom_linerange(aes(ymin =df.SF$CI_Low, ymax=df.SF$CI_High, x = Model), size = sLine) +
#     scale_y_continuous(breaks = seq(0, 1, by = .25), limits=c(0,1), expand = c(0,0)) + geom_hline(yintercept= .5, linetype="dashed", size = sLine) +
#     xlab("Models") + ylab("Categorization Score") + theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
#                                                                                axis.text.x = element_text(size=sAx, color = "black",angle =45,hjust = 1),
#                                                                                axis.title.x = element_blank(),
#                                                                                axis.title.y = element_text(size=sTitle),
#                                                                                axis.line = element_line(size = sLine),
#                                                                                axis.ticks= element_line(size = sLine, color = 'black'),
#                                                                                axis.ticks.length = unit(.09, "cm"),
#                                                                                legend.position ="none")
#
#
#   ggsave(filename =  paste('Infant_Data/Figures/', ee, '_', cl,'_SF.png', sep = ""), plot = last_plot(), dpi = 300,width =3, height = 3)
#
#
#   #reliability 'view' Figure
#   df.view = df[df$Condition == 'View' & df$Classifier == cl,]
#
#   ggplot(df.view, aes(x = Model, y= Acc, fill = Model)) + geom_col(color = "black", width = .5, size = sLine) + scale_fill_manual(values=ModelCols) +
#     geom_linerange(aes(ymin =df.view$CI_Low, ymax=df.view$CI_High, x = Model), size = sLine) +
#     scale_y_continuous(breaks = seq(0, 1, by = .25), limits=c(0,1), expand = c(0,0)) + geom_hline(yintercept= .5, linetype="dashed", size = sLine) +
#     xlab("Models") + ylab("Categorization Score") + theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
#                                                                                axis.text.x = element_text(size=sAx, color = "black",angle =45,hjust = 1),
#                                                                                axis.title.x = element_blank(),
#                                                                                axis.title.y = element_text(size=sTitle),
#                                                                                axis.line = element_line(size = sLine),
#                                                                                axis.ticks= element_line(size = sLine, color = 'black'),
#                                                                                axis.ticks.length = unit(.09, "cm"),
#                                                                                legend.position ="none")
#
#
#   ggsave(filename =  paste('Infant_Data/Figures/', ee, '_', cl,'_view.png', sep = ""), plot = last_plot(), dpi = 300,width =3, height = 3)
#
#
#   #One shot learning across changes in skeleton (i.e., by SF)
#   df.skel = df[df$Condition == 'Skel' & df$Classifier == cl,]
#
#   ggplot(df.skel, aes(x = Model, y= Acc, fill = Model)) + geom_col(color = "black", width = .5, size = sLine) + scale_fill_manual(values=ModelCols) +
#     geom_linerange(aes(ymin =df.skel$CI_Low, ymax=df.skel$CI_High, x = Model), size = sLine) +
#     scale_y_continuous(breaks = seq(0, 1, by = .25), limits=c(0,1), expand = c(0,0)) + geom_hline(yintercept= .5, linetype="dashed", size = sLine) +
#     xlab("Models") + ylab("Categorization Score") + theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
#                                                                             axis.text.x = element_text(size=sAx, color = "black",angle =45,hjust = 1),
#                                                                             axis.title.x = element_blank(),
#                                                                             axis.title.y = element_text(size=sTitle),
#                                                                             axis.line = element_line(size = sLine),
#                                                                             axis.ticks= element_line(size = sLine, color = 'black'),
#                                                                             axis.ticks.length = unit(.09, "cm"),
#                                                                             legend.position ="none")
#
#
#   ggsave(filename =  paste('Infant_Data/Figures/', ee, '_', cl,'_Skel.png', sep = ""), plot = last_plot(), dpi = 300,width =3, height = 3)
#
#
#   #SF one-class learning figure
#
#   #Multi-class learning figure
#   # df = as.data.frame(eval(as.name(paste(ee, '.Models_MSL', sep=""))))
#   # df = df[df$Classifier == cl,]
#   # df$Model = factor(df$Model, levels = c( 'GBJ', 'GIST', 'AlexNet-IN', 'ResNet-IN', 'AlexNet-SIN', 'ResNet-SIN', 'CorNet-Z', 'CorNet-S'))
#   # df$Acc = as.numeric(as.character(df$Acc))
#   # df$CI_Low = as.numeric(as.character(df$CI_Low))
#   # df$CI_High = as.numeric(as.character(df$CI_High))
#   #
#   #
#   # ggplot(df, aes(x = Model, y= Acc, fill = Model)) + geom_col(color = "black", width = .5, size = sLine) + scale_fill_manual(values=ModelCols) +
#   #   geom_linerange(aes(ymin =df$CI_Low, ymax=df$CI_High, x = Model), size = sLine) +
#   #   scale_y_continuous(breaks = seq(0, 1, by = .25), limits=c(0,1), expand = c(0,0)) + geom_hline(yintercept= .5, linetype="dashed", size = sLine) +
#   #   xlab("Models") + ylab("Categorization Score") + theme_classic() + theme(axis.text.y = element_text(size=sAx, color = "black"),
#   #                                                                              axis.text.x = element_text(size=sAx, color = "black",angle =45,hjust = 1),
#   #                                                                              axis.title.x = element_blank(),
#   #                                                                              axis.title.y = element_text(size=sTitle),
#   #                                                                              axis.line = element_line(size = sLine),
#   #                                                                              axis.ticks= element_line(size = sLine, color = 'black'),
#   #                                                                              axis.ticks.length = unit(.09, "cm"),
#   #                                                                              legend.position ="none")
#   #
#   #
#   # ggsave(filename =  paste('Infant_Data/Figures/', ee, '_', cl,'_MSL.png', sep = ""), plot = last_plot(), dpi = 300,width =3, height = 3)
#   #
#   #
#
# }
}
